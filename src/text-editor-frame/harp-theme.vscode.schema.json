{
  "$ref": "#/definitions/Theme",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AmbientLight": {
      "additionalProperties": false,
      "defaultSnippets": [
        {
          "body": {
            "color": "#${2:fff}",
            "intensity": "^${3:1}",
            "name": "${1:ambient light}",
            "type": "ambient"
          },
          "description": "Adds a new Ambient Light",
          "label": "New Ambient Light"
        }
      ],
      "description": "Light type: ambient.",
      "properties": {
        "color": {
          "format": "color-hex",
          "type": "string"
        },
        "intensity": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "ambient"
          ],
          "type": "string"
        }
      },
      "required": [
        "color",
        "name",
        "type"
      ],
      "type": "object"
    },
    "BoxedAnyDefinition": {
      "additionalProperties": false,
      "description": "Boxed definition without type.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "type": "string"
        },
        "value": {
          "anyOf": [
            {
              "$ref": "#/definitions/LiteralValue"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ],
          "description": "The value of the definition."
        }
      },
      "required": [
        "value"
      ],
      "type": "object"
    },
    "BoxedBooleanDefinition": {
      "additionalProperties": false,
      "description": "A boxed boolean value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "boolean"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
          "description": "The value of the definition."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "BoxedColorDefinition": {
      "additionalProperties": false,
      "description": "A boxed color value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "color"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
          "description": "The value of the definition."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "BoxedDefinition": {
      "anyOf": [
        {
          "$ref": "#/definitions/BoxedAnyDefinition"
        },
        {
          "$ref": "#/definitions/BoxedBooleanDefinition"
        },
        {
          "$ref": "#/definitions/BoxedNumericDefinition"
        },
        {
          "$ref": "#/definitions/BoxedStringDefinition"
        },
        {
          "$ref": "#/definitions/BoxedColorDefinition"
        },
        {
          "$ref": "#/definitions/BoxedSelectorDefinition"
        }
      ],
      "description": "A boxed value definition."
    },
    "BoxedNumericDefinition": {
      "additionalProperties": false,
      "description": "A boxed numerical value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "number"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
          "description": "The value of the definition."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "BoxedSelectorDefinition": {
      "additionalProperties": false,
      "description": "A boxed selector value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "selector"
          ],
          "type": "string"
        },
        "value": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ],
          "description": "The value of the definition.\n\nSee [[BaseStyle.when]]."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "BoxedStringDefinition": {
      "additionalProperties": false,
      "description": "A boxed string value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "string"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
          "description": "The value of the definition."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "CubemapSky": {
      "additionalProperties": false,
      "description": "Interface that defines a cubemap sky.",
      "properties": {
        "negativeX": {
          "description": "Negative X cube map face.",
          "type": "string"
        },
        "negativeY": {
          "description": "Negative Y cube map face.",
          "type": "string"
        },
        "negativeZ": {
          "description": "Negative Z cube map face.",
          "type": "string"
        },
        "positiveX": {
          "description": "Positive X cube map face.",
          "type": "string"
        },
        "positiveY": {
          "description": "Positive Y cube map face.",
          "type": "string"
        },
        "positiveZ": {
          "description": "Positive Z cube map face.",
          "type": "string"
        },
        "type": {
          "description": "Sky type.",
          "enum": [
            "cubemap"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "positiveX",
        "negativeX",
        "positiveY",
        "negativeY",
        "positiveZ",
        "negativeZ"
      ],
      "type": "object"
    },
    "DataTextureProperties": {
      "additionalProperties": false,
      "description": "Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).",
      "properties": {
        "format": {
          "$ref": "#/definitions/PixelFormat"
        },
        "height": {
          "type": "number"
        },
        "type": {
          "$ref": "#/definitions/TextureDataType"
        },
        "width": {
          "type": "number"
        }
      },
      "required": [
        "width",
        "height"
      ],
      "type": "object"
    },
    "Definition": {
      "anyOf": [
        {
          "$ref": "#/definitions/LiteralValue"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/BoxedDefinition"
        },
        {
          "$ref": "#/definitions/StyleDeclaration"
        }
      ],
      "description": "Possible values for `definitions` element of [Theme]."
    },
    "Definitions": {
      "additionalProperties": {
        "$ref": "#/definitions/Definition"
      },
      "description": "An array of [[Definition]]s.",
      "type": "object"
    },
    "DirectionalLight": {
      "additionalProperties": false,
      "defaultSnippets": [
        {
          "body": {
            "color": "#${2:fff}",
            "direction": {
              "x": "^${4:1}",
              "y": "^${5:0}",
              "z": "^${6:0}"
            },
            "intensity": "^${3:1}",
            "name": "${1:directional-light$:1}",
            "type": "directional"
          },
          "description": "Adds a new Directional Light",
          "label": "New Directional Light"
        }
      ],
      "description": "Light type: directional.",
      "properties": {
        "castShadow": {
          "type": "boolean"
        },
        "color": {
          "format": "color-hex",
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/Vector3Like"
        },
        "intensity": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "directional"
          ],
          "type": "string"
        }
      },
      "required": [
        "color",
        "direction",
        "intensity",
        "name",
        "type"
      ],
      "type": "object"
    },
    "DynamicProperty<(\"Above\"|\"Center\"|\"Below\")>": {
      "anyOf": [
        {
          "enum": [
            "Above"
          ],
          "type": "string"
        },
        {
          "enum": [
            "Center"
          ],
          "type": "string"
        },
        {
          "enum": [
            "Below"
          ],
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3C(%22Above%22%7C%22Center%22%7C%22Below%22)%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<(\"Left\"|\"Center\"|\"Right\")>": {
      "anyOf": [
        {
          "enum": [
            "Left"
          ],
          "type": "string"
        },
        {
          "enum": [
            "Center"
          ],
          "type": "string"
        },
        {
          "enum": [
            "Right"
          ],
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3C(%22Left%22%7C%22Center%22%7C%22Right%22)%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<(\"None\"|\"Character\"|\"Word\")>": {
      "anyOf": [
        {
          "enum": [
            "None"
          ],
          "type": "string"
        },
        {
          "enum": [
            "Character"
          ],
          "type": "string"
        },
        {
          "enum": [
            "Word"
          ],
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3C(%22None%22%7C%22Character%22%7C%22Word%22)%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<(\"None\"|\"Circle\")>": {
      "anyOf": [
        {
          "enum": [
            "None"
          ],
          "type": "string"
        },
        {
          "enum": [
            "Circle"
          ],
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3C(%22None%22%7C%22Circle%22)%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<LineCaps>": {
      "anyOf": [
        {
          "$ref": "#/definitions/LineCaps"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3CLineCaps%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<LineDashes>": {
      "anyOf": [
        {
          "$ref": "#/definitions/LineDashes"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3CLineDashes%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<StyleColor>": {
      "anyOf": [
        {
          "$ref": "#/definitions/StyleColor"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3CStyleColor%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<StyleLength>": {
      "anyOf": [
        {
          "$ref": "#/definitions/StyleLength"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3CStyleLength%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<boolean>": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3Cboolean%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<number>": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3Cnumber%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<string>": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition%3Cstring%3E"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "Fog": {
      "additionalProperties": false,
      "description": "Interface that defines the options to configure fog.",
      "properties": {
        "color": {
          "description": "Fog's color.",
          "type": "string"
        },
        "startRatio": {
          "description": "Distance ratio to far plane at which the linear fog begins.",
          "type": "number"
        }
      },
      "required": [
        "color",
        "startRatio"
      ],
      "type": "object"
    },
    "FontCatalogConfig": {
      "additionalProperties": false,
      "description": "Fonts used for all text related rendering.",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "name"
      ],
      "type": "object"
    },
    "GeometryKind": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/StandardGeometryKind"
        }
      ],
      "description": "Geometry kind used for use by [[BaseTechniqueParams.kind]]."
    },
    "GeometryKindSet": {
      "additionalProperties": false,
      "description": "A set of [[GeometryKind]]s.",
      "properties": {
        "size": {
          "type": "number"
        }
      },
      "required": [
        "size"
      ],
      "type": "object"
    },
    "GradientSky": {
      "additionalProperties": false,
      "description": "Interface that defines a procedural gradient sky.",
      "properties": {
        "bottomColor": {
          "description": "Color of bottom part of the gradient.",
          "format": "color-hex",
          "type": "string"
        },
        "groundColor": {
          "description": "Color of the ground plane.",
          "format": "color-hex",
          "type": "string"
        },
        "monomialPower": {
          "description": "Texture's gradient power.",
          "type": "number"
        },
        "topColor": {
          "description": "Color of the upper part of the gradient.",
          "format": "color-hex",
          "type": "string"
        },
        "type": {
          "description": "Sky type.",
          "enum": [
            "gradient"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "topColor",
        "bottomColor",
        "groundColor"
      ],
      "type": "object"
    },
    "HeightBasedColors": {
      "additionalProperties": false,
      "description": "Interface containing the definition of different colors to be used at different heights with the\n[[TerrainTechnique]].",
      "properties": {
        "colorArray": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "heightArray": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "heightArray",
        "colorArray"
      ],
      "type": "object"
    },
    "ImageDefinition": {
      "additionalProperties": false,
      "description": "Define an image (e.g. icon).",
      "properties": {
        "atlas": {
          "description": "Url of JSON file containing the texture atlas",
          "type": "string"
        },
        "preload": {
          "description": "`true` to start loading at init tile, `false` to lazily wait until required.",
          "type": "boolean"
        },
        "url": {
          "description": "Url to load content from.",
          "type": "string"
        }
      },
      "required": [
        "url",
        "preload"
      ],
      "type": "object"
    },
    "ImageDefinitions": {
      "additionalProperties": {
        "$ref": "#/definitions/ImageDefinition",
        "description": "Name of Image."
      },
      "type": "object"
    },
    "ImageTexture": {
      "additionalProperties": false,
      "description": "Can be used to create a texture atlas.",
      "properties": {
        "flipH": {
          "description": "Defaults to false.",
          "type": "boolean"
        },
        "flipV": {
          "description": "Defaults to false.",
          "type": "boolean"
        },
        "height": {
          "description": "Specify sub-region:  Defaults to 0, meaning height is taken from loaded image.",
          "type": "number"
        },
        "image": {
          "description": "Name of ImageDefinition to use.",
          "type": "string"
        },
        "name": {
          "description": "Name of ImageTexture. Used to reference texture in the styles.",
          "type": "string"
        },
        "opacity": {
          "description": "Defaults to 1.",
          "type": "number"
        },
        "origin": {
          "description": "Origin of image, defaults to \"topleft\"",
          "type": "string"
        },
        "width": {
          "description": "Specify sub-region:  Defaults to 0, meaning width is taken from loaded image.",
          "type": "number"
        },
        "xOffset": {
          "description": "Specify sub-region: Defaults to 0.",
          "type": "number"
        },
        "yOffset": {
          "description": "Specify sub-region: Defaults to 0.",
          "type": "number"
        }
      },
      "required": [
        "name",
        "image"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<(\"Above\"|\"Center\"|\"Below\")>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "enum": [
              "Above",
              "Center",
              "Below"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<(\"Left\"|\"Center\"|\"Right\")>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "enum": [
              "Left",
              "Center",
              "Right"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<(\"None\"|\"Character\"|\"Word\")>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "enum": [
              "None",
              "Character",
              "Word"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<(\"None\"|\"Circle\")>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "enum": [
              "None",
              "Circle"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<LineCaps>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/LineCaps"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<LineDashes>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/LineDashes"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<StyleColor>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/StyleColor"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<StyleLength>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/StyleLength"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<boolean>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "type": "boolean"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<number>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<string>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "JsonArray": {
      "description": "A type representing JSON arrays.",
      "items": {
        "$ref": "#/definitions/JsonValue"
      },
      "type": "array"
    },
    "JsonExpr": {
      "$ref": "#/definitions/JsonArray",
      "description": "The JSON representation of an {@link Expr} object."
    },
    "JsonObject": {
      "additionalProperties": {
        "$ref": "#/definitions/JsonValue"
      },
      "description": "A type representing JSON objects.",
      "type": "object"
    },
    "JsonValue": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "boolean"
        },
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonObject"
        },
        {
          "$ref": "#/definitions/JsonArray"
        }
      ],
      "description": "A type represeting JSON values."
    },
    "Light": {
      "anyOf": [
        {
          "$ref": "#/definitions/AmbientLight"
        },
        {
          "$ref": "#/definitions/DirectionalLight"
        }
      ],
      "description": "Possible lights used for light the map."
    },
    "LineCaps": {
      "description": "Available line caps types(`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\nDefault is `\"Round\"`.",
      "enum": [
        "Square",
        "Round",
        "None",
        "TriangleOut",
        "TriangleIn"
      ],
      "type": "string"
    },
    "LineDashes": {
      "description": "Available line dash types(`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\nDefault is `\"Square\"`.",
      "enum": [
        "Square",
        "Round",
        "Diamond"
      ],
      "type": "string"
    },
    "LiteralValue": {
      "description": "Possible types of unboxed literal values carried by [[Definition]].",
      "type": [
        "string",
        "number",
        "boolean"
      ]
    },
    "MagFilter": {
      "description": "Available texture magnification filters.",
      "enum": [
        "nearest",
        "linear"
      ],
      "type": "string"
    },
    "MinFilter": {
      "description": "Available texture minification filters.",
      "enum": [
        "nearest",
        "nearestMipMapNearest",
        "nearestMipMapLinear",
        "linear",
        "linearMipMapNearest",
        "linearMipMapLinear"
      ],
      "type": "string"
    },
    "PixelFormat": {
      "enum": [
        "Alpha",
        "RGB",
        "RGBA",
        "Luminance",
        "LuminanceAlpha",
        "RGBE",
        "Depth",
        "DepthStencil",
        "Red"
      ],
      "type": "string"
    },
    "PoiStackMode": {
      "description": "Define the stacking option. Enum values for theme file are in \"kebab-case\".",
      "enum": [
        "show-in-stack",
        "hide-in-stack",
        "show-parent"
      ],
      "type": "string"
    },
    "PoiTableRef": {
      "additionalProperties": false,
      "description": "Definition for a [[PoiTable]] reference as part of the {@link Theme} object.",
      "properties": {
        "name": {
          "description": "Required name of the [[PoiTable]] for later reference.",
          "type": "string"
        },
        "url": {
          "description": "Required URL from where to load [[PoiTable]].\n\nShould refer to JSON that is matched [[PoiTableDef]] interface.",
          "type": "string"
        },
        "useAltNamesForKey": {
          "description": "If set to `true`, the list of values in the field \"altNames\" will be used as names for this\nPOI.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "url",
        "useAltNamesForKey"
      ],
      "type": "object"
    },
    "ShaderTechniqueMaterialParameters": {
      "type": "object"
    },
    "Sky": {
      "anyOf": [
        {
          "$ref": "#/definitions/GradientSky"
        },
        {
          "$ref": "#/definitions/CubemapSky"
        }
      ],
      "description": "Interface that defines the options to configure the sky."
    },
    "StandardGeometryKind": {
      "description": "Standard kinds of geometry.",
      "enum": [
        "_all_",
        "background",
        "terrain",
        "area",
        "line",
        "water",
        "border",
        "road",
        "building",
        "label",
        "detail"
      ],
      "type": "string"
    },
    "StyleColor": {
      "description": "Color literals.",
      "type": [
        "string",
        "number"
      ]
    },
    "StyleDeclaration": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "enablePicking": {
                  "description": "Whether to enable picking on these points.",
                  "type": "boolean"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "size": {
                  "description": "Size of point in pixels.",
                  "type": "number"
                },
                "texture": {
                  "description": "URL of a texture image to be loaded.",
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "enablePicking": {
              "description": "Whether to enable picking on these points.",
              "type": "boolean"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "size": {
              "description": "Size of point in pixels.",
              "type": "number"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "squares"
              ],
              "type": "string"
            },
            "texture": {
              "description": "URL of a texture image to be loaded.",
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "enablePicking": {
                  "description": "Whether to enable picking on these points.",
                  "type": "boolean"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "size": {
                  "description": "Size of point in pixels.",
                  "type": "number"
                },
                "texture": {
                  "description": "URL of a texture image to be loaded.",
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "enablePicking": {
              "description": "Whether to enable picking on these points.",
              "type": "boolean"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "size": {
              "description": "Size of point in pixels.",
              "type": "number"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "circles"
              ],
              "type": "string"
            },
            "texture": {
              "description": "URL of a texture image to be loaded.",
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "alwaysOnTop": {
              "description": "If `true`, the label will always be rendered on top. If overlapping with other labels with\nthis flag set, the render order is undefined.",
              "type": "boolean"
            },
            "attr": {
              "additionalProperties": false,
              "properties": {
                "alwaysOnTop": {
                  "description": "If `true`, the label will always be rendered on top. If overlapping with other labels with\nthis flag set, the render order is undefined.",
                  "type": "boolean"
                },
                "backgroundColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "backgroundOpacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Background text opacity value."
                },
                "backgroundSize": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Size of the text background (pixels)."
                },
                "canvasRotation": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "[[TextCanvas]] rotation (radians)."
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "distanceScale": {
                  "description": "Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.",
                  "type": "number"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "fontName": {
                  "description": "Name of the preferred [[Font]] to be used when rendering.",
                  "type": "string"
                },
                "fontStyle": {
                  "description": "Glyph style to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "Bold",
                    "Italic",
                    "BoldItalic"
                  ],
                  "type": "string"
                },
                "fontVariant": {
                  "description": "Glyph variant to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "AllCaps",
                    "SmallCaps"
                  ],
                  "type": "string"
                },
                "hAlignment": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22Left%22%7C%22Center%22%7C%22Right%22)%3E",
                  "description": "Text position regarding the baseline."
                },
                "iconBrightness": {
                  "description": "Icon brightness.\n\nFactor that multiplies a color on top of the icon texture (and `iconColor`) with `0` being\nfully black as final output, `1` being the original rgb colors of the texture.",
                  "type": "number"
                },
                "iconColor": {
                  "$ref": "#/definitions/StyleColor",
                  "description": "Icon color.\n\nIf specified, combined using multiplication with color value read from icon texture.\n\nWorks best for grayscale or monochromatic textures."
                },
                "iconFadeTime": {
                  "description": "Fading time for icons in seconds.",
                  "type": "number"
                },
                "iconIsOptional": {
                  "description": "If true, the text will appear even if the icon cannot be rendered because of missing icon\ngraphics. Defaults to `true`.",
                  "type": "boolean"
                },
                "iconMaxZoomLevel": {
                  "description": "Maximum zoomLevel at which to display the label icon. No default.",
                  "type": "number"
                },
                "iconMayOverlap": {
                  "description": "If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\nproperty value from `textMayOverlap` will be used.",
                  "type": "boolean"
                },
                "iconMinZoomLevel": {
                  "description": "Minimum zoomLevel at which to display the label icon. No default.",
                  "type": "number"
                },
                "iconReserveSpace": {
                  "description": "If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\ndefined, the property value from `iconReserveSpace` will be used.",
                  "type": "boolean"
                },
                "iconScale": {
                  "description": "Scaling factor of icon.",
                  "type": "number"
                },
                "iconXOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Horizontal offset (to the right) in screen pixels."
                },
                "iconYOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Vertical offset (up) in screen pixels."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "imageTexture": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "Name of [[ImageTexture]] definition to use."
                },
                "imageTextureField": {
                  "description": "Field name to extract imageTexture content from.",
                  "type": "string"
                },
                "imageTexturePostfix": {
                  "description": "Postfix for `imageTexture` if `imageTextureField` is used.",
                  "type": "string"
                },
                "imageTexturePrefix": {
                  "description": "Prefix for `imageTexture` if `imageTextureField` is used.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "label": {
                  "description": "Field name of object containing the text to be rendered.",
                  "type": "string"
                },
                "leading": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Inter-line spacing (pixels). Scaled by `size`."
                },
                "lineRotation": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Line typesetting rotation (radians)."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Maximum line width (pixels)."
                },
                "maxLines": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Maximum number of lines for this label."
                },
                "minDistance": {
                  "description": "Minimal distance between markers in screen pixels.",
                  "type": "number"
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                "placements": {
                  "description": "Text label positions relative to the label central position (anchor point).\n\nThis attribute defines a comma separated tokens of possible text placements\nrelative to label central position (anchor), for example: \"TL, TR, C\".\nKeep in mind that horizontal placement defines text position in opposite way to\nthe alignment, so the text `R` placed (located on the **right side** of label position)\nwill be the same as `Left` aligned by deduction. On other side vertical placement is quite\nsimilar to vertical alignment so `T` placement corresponds with `Above` alignment.",
                  "type": "string"
                },
                "poiName": {
                  "description": "Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\nsupersedes any value read from the field referenced in `poiNameField`.",
                  "type": "string"
                },
                "poiNameField": {
                  "description": "Name of the field to evaluate to get the name of the POI options in the POI table.",
                  "type": "string"
                },
                "poiTable": {
                  "description": "Name of the POI table which should be used for this POI.",
                  "type": "string"
                },
                "priority": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Priority of marker, defaults to `0`. Markers with highest priority get placed first."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "renderTextDuringMovements": {
                  "description": "If `false`, text will not be rendered during animations. Defaults to `true`.",
                  "type": "boolean"
                },
                "rotation": {
                  "description": "Glyph local rotation (radians).",
                  "type": "number"
                },
                "screenHeight": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Vertical height in pixels, controls vertical scaling. Overrides `iconScale`."
                },
                "screenWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`."
                },
                "showOnMap": {
                  "description": "Should be displayed on map or not. Defaults to `true`.",
                  "type": "boolean"
                },
                "size": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Size of the text (pixels)."
                },
                "stackMode": {
                  "$ref": "#/definitions/PoiStackMode",
                  "description": "Specify stack mode. Defaults to `ShowInStack`."
                },
                "style": {
                  "description": "Name of the text style.",
                  "type": "string"
                },
                "text": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "Text to be displayed for feature.\n\nDefaults to first defined:\n  - feature property `label` if present in technique (deprecated)\n  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n  - `[\"get\", \"name\"]`\n\nSee [[ExtendedTileInfo.getFeatureText]]"
                },
                "textFadeTime": {
                  "description": "Fading time for labels in seconds.",
                  "type": "number"
                },
                "textIsOptional": {
                  "description": "If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n`false`.",
                  "type": "boolean"
                },
                "textMaxZoomLevel": {
                  "description": "Maximum zoomLevel at which to display the label text. No default.",
                  "type": "number"
                },
                "textMayOverlap": {
                  "description": "If `false`, text may overlap markers.",
                  "type": "boolean"
                },
                "textMinZoomLevel": {
                  "description": "Minimum zoomLevel at which to display the label text. No default.",
                  "type": "number"
                },
                "textReserveSpace": {
                  "description": "If `false`, text will not reserve screen space, other markers will be able to overlap.",
                  "type": "boolean"
                },
                "tracking": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Inter-glyph spacing (pixels). Scaled by `size`."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "useAbbreviation": {
                  "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
                  "type": "boolean"
                },
                "useIsoCode": {
                  "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
                  "type": "boolean"
                },
                "vAlignment": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22Above%22%7C%22Center%22%7C%22Below%22)%3E",
                  "description": "Text position inside a line."
                },
                "worldOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "World space offset in meters applied to the icon. Valid only for icons which have the\n\"offset_direction\" property as an attribute of the data."
                },
                "wrappingMode": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Character%22%7C%22Word%22)%3E",
                  "description": "Wrapping (line-breaking) mode."
                },
                "xOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Horizontal offset (to the right) in screen pixels."
                },
                "yOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Vertical offset (up) in screen pixels."
                }
              },
              "type": "object"
            },
            "backgroundColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "backgroundOpacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Background text opacity value."
            },
            "backgroundSize": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Size of the text background (pixels)."
            },
            "canvasRotation": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "[[TextCanvas]] rotation (radians)."
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "distanceScale": {
              "description": "Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.",
              "type": "number"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "fontName": {
              "description": "Name of the preferred [[Font]] to be used when rendering.",
              "type": "string"
            },
            "fontStyle": {
              "description": "Glyph style to apply for the currently active [[Font]].",
              "enum": [
                "Regular",
                "Bold",
                "Italic",
                "BoldItalic"
              ],
              "type": "string"
            },
            "fontVariant": {
              "description": "Glyph variant to apply for the currently active [[Font]].",
              "enum": [
                "Regular",
                "AllCaps",
                "SmallCaps"
              ],
              "type": "string"
            },
            "hAlignment": {
              "$ref": "#/definitions/DynamicProperty%3C(%22Left%22%7C%22Center%22%7C%22Right%22)%3E",
              "description": "Text position regarding the baseline."
            },
            "iconBrightness": {
              "description": "Icon brightness.\n\nFactor that multiplies a color on top of the icon texture (and `iconColor`) with `0` being\nfully black as final output, `1` being the original rgb colors of the texture.",
              "type": "number"
            },
            "iconColor": {
              "$ref": "#/definitions/StyleColor",
              "description": "Icon color.\n\nIf specified, combined using multiplication with color value read from icon texture.\n\nWorks best for grayscale or monochromatic textures."
            },
            "iconFadeTime": {
              "description": "Fading time for icons in seconds.",
              "type": "number"
            },
            "iconIsOptional": {
              "description": "If true, the text will appear even if the icon cannot be rendered because of missing icon\ngraphics. Defaults to `true`.",
              "type": "boolean"
            },
            "iconMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconMayOverlap": {
              "description": "If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\nproperty value from `textMayOverlap` will be used.",
              "type": "boolean"
            },
            "iconMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconReserveSpace": {
              "description": "If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\ndefined, the property value from `iconReserveSpace` will be used.",
              "type": "boolean"
            },
            "iconScale": {
              "description": "Scaling factor of icon.",
              "type": "number"
            },
            "iconXOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Horizontal offset (to the right) in screen pixels."
            },
            "iconYOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Vertical offset (up) in screen pixels."
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "imageTexture": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "Name of [[ImageTexture]] definition to use."
            },
            "imageTextureField": {
              "description": "Field name to extract imageTexture content from.",
              "type": "string"
            },
            "imageTexturePostfix": {
              "description": "Postfix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "imageTexturePrefix": {
              "description": "Prefix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "label": {
              "description": "Field name of object containing the text to be rendered.",
              "type": "string"
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "leading": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Inter-line spacing (pixels). Scaled by `size`."
            },
            "lineRotation": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Line typesetting rotation (radians)."
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Maximum line width (pixels)."
            },
            "maxLines": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Maximum number of lines for this label."
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minDistance": {
              "description": "Minimal distance between markers in screen pixels.",
              "type": "number"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
            },
            "placements": {
              "description": "Text label positions relative to the label central position (anchor point).\n\nThis attribute defines a comma separated tokens of possible text placements\nrelative to label central position (anchor), for example: \"TL, TR, C\".\nKeep in mind that horizontal placement defines text position in opposite way to\nthe alignment, so the text `R` placed (located on the **right side** of label position)\nwill be the same as `Left` aligned by deduction. On other side vertical placement is quite\nsimilar to vertical alignment so `T` placement corresponds with `Above` alignment.",
              "type": "string"
            },
            "poiName": {
              "description": "Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\nsupersedes any value read from the field referenced in `poiNameField`.",
              "type": "string"
            },
            "poiNameField": {
              "description": "Name of the field to evaluate to get the name of the POI options in the POI table.",
              "type": "string"
            },
            "poiTable": {
              "description": "Name of the POI table which should be used for this POI.",
              "type": "string"
            },
            "priority": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Priority of marker, defaults to `0`. Markers with highest priority get placed first."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "renderTextDuringMovements": {
              "description": "If `false`, text will not be rendered during animations. Defaults to `true`.",
              "type": "boolean"
            },
            "rotation": {
              "description": "Glyph local rotation (radians).",
              "type": "number"
            },
            "screenHeight": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Vertical height in pixels, controls vertical scaling. Overrides `iconScale`."
            },
            "screenWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`."
            },
            "showOnMap": {
              "description": "Should be displayed on map or not. Defaults to `true`.",
              "type": "boolean"
            },
            "size": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Size of the text (pixels)."
            },
            "stackMode": {
              "$ref": "#/definitions/PoiStackMode",
              "description": "Specify stack mode. Defaults to `ShowInStack`."
            },
            "style": {
              "description": "Name of the text style.",
              "type": "string"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "labeled-icon"
              ],
              "type": "string"
            },
            "text": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "Text to be displayed for feature.\n\nDefaults to first defined:\n  - feature property `label` if present in technique (deprecated)\n  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n  - `[\"get\", \"name\"]`\n\nSee [[ExtendedTileInfo.getFeatureText]]"
            },
            "textFadeTime": {
              "description": "Fading time for labels in seconds.",
              "type": "number"
            },
            "textIsOptional": {
              "description": "If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n`false`.",
              "type": "boolean"
            },
            "textMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textMayOverlap": {
              "description": "If `false`, text may overlap markers.",
              "type": "boolean"
            },
            "textMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textReserveSpace": {
              "description": "If `false`, text will not reserve screen space, other markers will be able to overlap.",
              "type": "boolean"
            },
            "tracking": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Inter-glyph spacing (pixels). Scaled by `size`."
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "useAbbreviation": {
              "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
              "type": "boolean"
            },
            "useIsoCode": {
              "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
              "type": "boolean"
            },
            "vAlignment": {
              "$ref": "#/definitions/DynamicProperty%3C(%22Above%22%7C%22Center%22%7C%22Below%22)%3E",
              "description": "Text position inside a line."
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "worldOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "World space offset in meters applied to the icon. Valid only for icons which have the\n\"offset_direction\" property as an attribute of the data."
            },
            "wrappingMode": {
              "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Character%22%7C%22Word%22)%3E",
              "description": "Wrapping (line-breaking) mode."
            },
            "xOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Horizontal offset (to the right) in screen pixels."
            },
            "yOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Vertical offset (up) in screen pixels."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "alwaysOnTop": {
              "description": "If `true`, the label will always be rendered on top. If overlapping with other labels with\nthis flag set, the render order is undefined.",
              "type": "boolean"
            },
            "attr": {
              "additionalProperties": false,
              "properties": {
                "alwaysOnTop": {
                  "description": "If `true`, the label will always be rendered on top. If overlapping with other labels with\nthis flag set, the render order is undefined.",
                  "type": "boolean"
                },
                "backgroundColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "backgroundOpacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Background text opacity value."
                },
                "backgroundSize": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Size of the text background (pixels)."
                },
                "canvasRotation": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "[[TextCanvas]] rotation (radians)."
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "distanceScale": {
                  "description": "Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.",
                  "type": "number"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "fontName": {
                  "description": "Name of the preferred [[Font]] to be used when rendering.",
                  "type": "string"
                },
                "fontStyle": {
                  "description": "Glyph style to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "Bold",
                    "Italic",
                    "BoldItalic"
                  ],
                  "type": "string"
                },
                "fontVariant": {
                  "description": "Glyph variant to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "AllCaps",
                    "SmallCaps"
                  ],
                  "type": "string"
                },
                "hAlignment": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22Left%22%7C%22Center%22%7C%22Right%22)%3E",
                  "description": "Text position regarding the baseline."
                },
                "iconBrightness": {
                  "description": "Icon brightness.\n\nFactor that multiplies a color on top of the icon texture (and `iconColor`) with `0` being\nfully black as final output, `1` being the original rgb colors of the texture.",
                  "type": "number"
                },
                "iconColor": {
                  "$ref": "#/definitions/StyleColor",
                  "description": "Icon color.\n\nIf specified, combined using multiplication with color value read from icon texture.\n\nWorks best for grayscale or monochromatic textures."
                },
                "iconFadeTime": {
                  "description": "Fading time for icons in seconds.",
                  "type": "number"
                },
                "iconIsOptional": {
                  "description": "If true, the text will appear even if the icon cannot be rendered because of missing icon\ngraphics. Defaults to `true`.",
                  "type": "boolean"
                },
                "iconMaxZoomLevel": {
                  "description": "Maximum zoomLevel at which to display the label icon. No default.",
                  "type": "number"
                },
                "iconMayOverlap": {
                  "description": "If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\nproperty value from `textMayOverlap` will be used.",
                  "type": "boolean"
                },
                "iconMinZoomLevel": {
                  "description": "Minimum zoomLevel at which to display the label icon. No default.",
                  "type": "number"
                },
                "iconReserveSpace": {
                  "description": "If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\ndefined, the property value from `iconReserveSpace` will be used.",
                  "type": "boolean"
                },
                "iconScale": {
                  "description": "Scaling factor of icon.",
                  "type": "number"
                },
                "iconXOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Horizontal offset (to the right) in screen pixels."
                },
                "iconYOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Vertical offset (up) in screen pixels."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "imageTexture": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "Name of [[ImageTexture]] definition to use."
                },
                "imageTextureField": {
                  "description": "Field name to extract imageTexture content from.",
                  "type": "string"
                },
                "imageTexturePostfix": {
                  "description": "Postfix for `imageTexture` if `imageTextureField` is used.",
                  "type": "string"
                },
                "imageTexturePrefix": {
                  "description": "Prefix for `imageTexture` if `imageTextureField` is used.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "label": {
                  "description": "Field name of object containing the text to be rendered.",
                  "type": "string"
                },
                "leading": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Inter-line spacing (pixels). Scaled by `size`."
                },
                "lineRotation": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Line typesetting rotation (radians)."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Maximum line width (pixels)."
                },
                "maxLines": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Maximum number of lines for this label."
                },
                "minDistance": {
                  "description": "Minimal distance between markers in screen pixels.",
                  "type": "number"
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                "placements": {
                  "description": "Text label positions relative to the label central position (anchor point).\n\nThis attribute defines a comma separated tokens of possible text placements\nrelative to label central position (anchor), for example: \"TL, TR, C\".\nKeep in mind that horizontal placement defines text position in opposite way to\nthe alignment, so the text `R` placed (located on the **right side** of label position)\nwill be the same as `Left` aligned by deduction. On other side vertical placement is quite\nsimilar to vertical alignment so `T` placement corresponds with `Above` alignment.",
                  "type": "string"
                },
                "poiName": {
                  "description": "Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\nsupersedes any value read from the field referenced in `poiNameField`.",
                  "type": "string"
                },
                "poiNameField": {
                  "description": "Name of the field to evaluate to get the name of the POI options in the POI table.",
                  "type": "string"
                },
                "poiTable": {
                  "description": "Name of the POI table which should be used for this POI.",
                  "type": "string"
                },
                "priority": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Priority of marker, defaults to `0`. Markers with highest priority get placed first."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "renderTextDuringMovements": {
                  "description": "If `false`, text will not be rendered during animations. Defaults to `true`.",
                  "type": "boolean"
                },
                "rotation": {
                  "description": "Glyph local rotation (radians).",
                  "type": "number"
                },
                "screenHeight": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Vertical height in pixels, controls vertical scaling. Overrides `iconScale`."
                },
                "screenWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`."
                },
                "showOnMap": {
                  "description": "Should be displayed on map or not. Defaults to `true`.",
                  "type": "boolean"
                },
                "size": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Size of the text (pixels)."
                },
                "stackMode": {
                  "$ref": "#/definitions/PoiStackMode",
                  "description": "Specify stack mode. Defaults to `ShowInStack`."
                },
                "style": {
                  "description": "Name of the text style.",
                  "type": "string"
                },
                "text": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "Text to be displayed for feature.\n\nDefaults to first defined:\n  - feature property `label` if present in technique (deprecated)\n  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n  - `[\"get\", \"name\"]`\n\nSee [[ExtendedTileInfo.getFeatureText]]"
                },
                "textFadeTime": {
                  "description": "Fading time for labels in seconds.",
                  "type": "number"
                },
                "textIsOptional": {
                  "description": "If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n`false`.",
                  "type": "boolean"
                },
                "textMaxZoomLevel": {
                  "description": "Maximum zoomLevel at which to display the label text. No default.",
                  "type": "number"
                },
                "textMayOverlap": {
                  "description": "If `false`, text may overlap markers.",
                  "type": "boolean"
                },
                "textMinZoomLevel": {
                  "description": "Minimum zoomLevel at which to display the label text. No default.",
                  "type": "number"
                },
                "textReserveSpace": {
                  "description": "If `false`, text will not reserve screen space, other markers will be able to overlap.",
                  "type": "boolean"
                },
                "tracking": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Inter-glyph spacing (pixels). Scaled by `size`."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "useAbbreviation": {
                  "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
                  "type": "boolean"
                },
                "useIsoCode": {
                  "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
                  "type": "boolean"
                },
                "vAlignment": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22Above%22%7C%22Center%22%7C%22Below%22)%3E",
                  "description": "Text position inside a line."
                },
                "worldOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "World space offset in meters applied to the icon. Valid only for icons which have the\n\"offset_direction\" property as an attribute of the data."
                },
                "wrappingMode": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Character%22%7C%22Word%22)%3E",
                  "description": "Wrapping (line-breaking) mode."
                },
                "xOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Horizontal offset (to the right) in screen pixels."
                },
                "yOffset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Vertical offset (up) in screen pixels."
                }
              },
              "type": "object"
            },
            "backgroundColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "backgroundOpacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Background text opacity value."
            },
            "backgroundSize": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Size of the text background (pixels)."
            },
            "canvasRotation": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "[[TextCanvas]] rotation (radians)."
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "distanceScale": {
              "description": "Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.",
              "type": "number"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "fontName": {
              "description": "Name of the preferred [[Font]] to be used when rendering.",
              "type": "string"
            },
            "fontStyle": {
              "description": "Glyph style to apply for the currently active [[Font]].",
              "enum": [
                "Regular",
                "Bold",
                "Italic",
                "BoldItalic"
              ],
              "type": "string"
            },
            "fontVariant": {
              "description": "Glyph variant to apply for the currently active [[Font]].",
              "enum": [
                "Regular",
                "AllCaps",
                "SmallCaps"
              ],
              "type": "string"
            },
            "hAlignment": {
              "$ref": "#/definitions/DynamicProperty%3C(%22Left%22%7C%22Center%22%7C%22Right%22)%3E",
              "description": "Text position regarding the baseline."
            },
            "iconBrightness": {
              "description": "Icon brightness.\n\nFactor that multiplies a color on top of the icon texture (and `iconColor`) with `0` being\nfully black as final output, `1` being the original rgb colors of the texture.",
              "type": "number"
            },
            "iconColor": {
              "$ref": "#/definitions/StyleColor",
              "description": "Icon color.\n\nIf specified, combined using multiplication with color value read from icon texture.\n\nWorks best for grayscale or monochromatic textures."
            },
            "iconFadeTime": {
              "description": "Fading time for icons in seconds.",
              "type": "number"
            },
            "iconIsOptional": {
              "description": "If true, the text will appear even if the icon cannot be rendered because of missing icon\ngraphics. Defaults to `true`.",
              "type": "boolean"
            },
            "iconMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconMayOverlap": {
              "description": "If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\nproperty value from `textMayOverlap` will be used.",
              "type": "boolean"
            },
            "iconMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconReserveSpace": {
              "description": "If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\ndefined, the property value from `iconReserveSpace` will be used.",
              "type": "boolean"
            },
            "iconScale": {
              "description": "Scaling factor of icon.",
              "type": "number"
            },
            "iconXOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Horizontal offset (to the right) in screen pixels."
            },
            "iconYOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Vertical offset (up) in screen pixels."
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "imageTexture": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "Name of [[ImageTexture]] definition to use."
            },
            "imageTextureField": {
              "description": "Field name to extract imageTexture content from.",
              "type": "string"
            },
            "imageTexturePostfix": {
              "description": "Postfix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "imageTexturePrefix": {
              "description": "Prefix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "label": {
              "description": "Field name of object containing the text to be rendered.",
              "type": "string"
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "leading": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Inter-line spacing (pixels). Scaled by `size`."
            },
            "lineRotation": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Line typesetting rotation (radians)."
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Maximum line width (pixels)."
            },
            "maxLines": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Maximum number of lines for this label."
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minDistance": {
              "description": "Minimal distance between markers in screen pixels.",
              "type": "number"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
            },
            "placements": {
              "description": "Text label positions relative to the label central position (anchor point).\n\nThis attribute defines a comma separated tokens of possible text placements\nrelative to label central position (anchor), for example: \"TL, TR, C\".\nKeep in mind that horizontal placement defines text position in opposite way to\nthe alignment, so the text `R` placed (located on the **right side** of label position)\nwill be the same as `Left` aligned by deduction. On other side vertical placement is quite\nsimilar to vertical alignment so `T` placement corresponds with `Above` alignment.",
              "type": "string"
            },
            "poiName": {
              "description": "Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\nsupersedes any value read from the field referenced in `poiNameField`.",
              "type": "string"
            },
            "poiNameField": {
              "description": "Name of the field to evaluate to get the name of the POI options in the POI table.",
              "type": "string"
            },
            "poiTable": {
              "description": "Name of the POI table which should be used for this POI.",
              "type": "string"
            },
            "priority": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Priority of marker, defaults to `0`. Markers with highest priority get placed first."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "renderTextDuringMovements": {
              "description": "If `false`, text will not be rendered during animations. Defaults to `true`.",
              "type": "boolean"
            },
            "rotation": {
              "description": "Glyph local rotation (radians).",
              "type": "number"
            },
            "screenHeight": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Vertical height in pixels, controls vertical scaling. Overrides `iconScale`."
            },
            "screenWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`."
            },
            "showOnMap": {
              "description": "Should be displayed on map or not. Defaults to `true`.",
              "type": "boolean"
            },
            "size": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Size of the text (pixels)."
            },
            "stackMode": {
              "$ref": "#/definitions/PoiStackMode",
              "description": "Specify stack mode. Defaults to `ShowInStack`."
            },
            "style": {
              "description": "Name of the text style.",
              "type": "string"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "line-marker"
              ],
              "type": "string"
            },
            "text": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "Text to be displayed for feature.\n\nDefaults to first defined:\n  - feature property `label` if present in technique (deprecated)\n  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n  - `[\"get\", \"name\"]`\n\nSee [[ExtendedTileInfo.getFeatureText]]"
            },
            "textFadeTime": {
              "description": "Fading time for labels in seconds.",
              "type": "number"
            },
            "textIsOptional": {
              "description": "If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n`false`.",
              "type": "boolean"
            },
            "textMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textMayOverlap": {
              "description": "If `false`, text may overlap markers.",
              "type": "boolean"
            },
            "textMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textReserveSpace": {
              "description": "If `false`, text will not reserve screen space, other markers will be able to overlap.",
              "type": "boolean"
            },
            "tracking": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Inter-glyph spacing (pixels). Scaled by `size`."
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "useAbbreviation": {
              "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
              "type": "boolean"
            },
            "useIsoCode": {
              "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
              "type": "boolean"
            },
            "vAlignment": {
              "$ref": "#/definitions/DynamicProperty%3C(%22Above%22%7C%22Center%22%7C%22Below%22)%3E",
              "description": "Text position inside a line."
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "worldOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "World space offset in meters applied to the icon. Valid only for icons which have the\n\"offset_direction\" property as an attribute of the data."
            },
            "wrappingMode": {
              "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Character%22%7C%22Word%22)%3E",
              "description": "Wrapping (line-breaking) mode."
            },
            "xOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Horizontal offset (to the right) in screen pixels."
            },
            "yOffset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Vertical offset (up) in screen pixels."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Width of line in pixels. WebGL implementations will normally render all lines with 1 pixel\nwidth, and ignore this value."
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to true if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Width of line in pixels. WebGL implementations will normally render all lines with 1 pixel\nwidth, and ignore this value."
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "line"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to true if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.",
                  "format": "color-hex"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Width of a line in meters."
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Width of a line in meters."
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "segments"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "caps": {
                  "$ref": "#/definitions/DynamicProperty%3CLineCaps%3E",
                  "description": "Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\nDefault is `\"Round\"`."
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "clipping": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Clip the line outside the tile if `true`."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "dashColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of a line dashes in hexadecimal or CSS-style notation,\nfor example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "dashSize": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
                  "description": "Length of a line in meters for different zoom levels."
                },
                "dashes": {
                  "$ref": "#/definitions/DynamicProperty%3CLineDashes%3E",
                  "description": "Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\nDefault is `\"Square\"`."
                },
                "drawRangeEnd": {
                  "description": "Describes the ending drawing position for the line (in the range [0...1]).\nDefault is `1.0`.",
                  "type": "number"
                },
                "drawRangeStart": {
                  "description": "Describes the starting drawing position for the line (in the range [0...1]).\nDefault is `0.0`.",
                  "type": "number"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "gapSize": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
                  "description": "Size of a gap between lines in meters for different zoom levels."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "lineColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                "lineFadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                "lineFadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
                  "description": "Width of a line in `metricUnit` for different zoom levels."
                },
                "metricUnit": {
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "offset": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Size in world units how far to offset the line perpendicular to its direction."
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
                },
                "outlineColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of a line outline in hexadecimal or CSS-style notation,\nfor example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "outlineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
                  "description": "Outline width of a line in `metricUnit`s for different zoom levels."
                },
                "polygonOffset": {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                "polygonOffsetFactor": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                "polygonOffsetUnits": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "secondaryCaps": {
                  "$ref": "#/definitions/DynamicProperty%3CLineCaps%3E",
                  "description": "Describes secondary line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`,\n`\"TriangleIn\"`).\nDefault is `\"Round\"`."
                },
                "secondaryCategory": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "Describes the category of the secondary geometry object created using this technique."
                },
                "secondaryColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n`\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "secondaryRenderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the secondary line geometry object created using this technique."
                },
                "secondaryWidth": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
                  "description": "Width of secondary line geometry in `metricUnit`s for different zoom levels."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "caps": {
              "$ref": "#/definitions/DynamicProperty%3CLineCaps%3E",
              "description": "Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\nDefault is `\"Round\"`."
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "clipping": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Clip the line outside the tile if `true`."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "dashColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of a line dashes in hexadecimal or CSS-style notation,\nfor example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "dashSize": {
              "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
              "description": "Length of a line in meters for different zoom levels."
            },
            "dashes": {
              "$ref": "#/definitions/DynamicProperty%3CLineDashes%3E",
              "description": "Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\nDefault is `\"Square\"`."
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "drawRangeEnd": {
              "description": "Describes the ending drawing position for the line (in the range [0...1]).\nDefault is `1.0`.",
              "type": "number"
            },
            "drawRangeStart": {
              "description": "Describes the starting drawing position for the line (in the range [0...1]).\nDefault is `0.0`.",
              "type": "number"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "gapSize": {
              "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
              "description": "Size of a gap between lines in meters for different zoom levels."
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "lineColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Sets the polygon outline color.",
              "format": "color-hex"
            },
            "lineFadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
            },
            "lineFadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
              "description": "Width of a line in `metricUnit` for different zoom levels."
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "offset": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Size in world units how far to offset the line perpendicular to its direction."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
            },
            "outlineColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of a line outline in hexadecimal or CSS-style notation,\nfor example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "outlineWidth": {
              "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
              "description": "Outline width of a line in `metricUnit`s for different zoom levels."
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Sets the polygon offset factor. Default is 0."
            },
            "polygonOffsetUnits": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Sets the polygon offset units. Default is 0."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "secondaryCaps": {
              "$ref": "#/definitions/DynamicProperty%3CLineCaps%3E",
              "description": "Describes secondary line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`,\n`\"TriangleIn\"`).\nDefault is `\"Round\"`."
            },
            "secondaryCategory": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "Describes the category of the secondary geometry object created using this technique."
            },
            "secondaryColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n`\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "secondaryRenderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the secondary line geometry object created using this technique."
            },
            "secondaryWidth": {
              "$ref": "#/definitions/DynamicProperty%3CStyleLength%3E",
              "description": "Width of secondary line geometry in `metricUnit`s for different zoom levels."
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "solid-line",
                "dashed-line"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "label-rejection-line"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "lineColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                "lineFadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                "lineFadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Width of the lines. Currently limited to the [0, 1] range."
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
                },
                "polygonOffset": {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                "polygonOffsetFactor": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                "polygonOffsetUnits": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                },
                "wireframe": {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "lineColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Sets the polygon outline color.",
              "format": "color-hex"
            },
            "lineFadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
            },
            "lineFadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Width of the lines. Currently limited to the [0, 1] range."
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Sets the polygon offset factor. Default is 0."
            },
            "polygonOffsetUnits": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Sets the polygon offset units. Default is 0."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "fill"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).",
              "type": "boolean"
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "alphaMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
            },
            "alphaMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "alphaTest": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
            },
            "attr": {
              "additionalProperties": false,
              "properties": {
                "alphaMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
                },
                "alphaMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "alphaTest": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
                },
                "bumpMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
                },
                "bumpMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
                  "format": "color-hex"
                },
                "depthTest": {
                  "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
                  "type": "boolean"
                },
                "displacementMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
                },
                "displacementMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "emissive": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
                  "format": "color-hex"
                },
                "emissiveIntensity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
                },
                "emissiveMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
                },
                "emissiveMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "map": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ]
                },
                "mapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "metalness": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
                },
                "metalnessMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
                },
                "metalnessMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "normalMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
                },
                "normalMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "normalMapType": {
                  "type": "number"
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
                },
                "refractionRatio": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "roughness": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `1.0`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
                },
                "roughnessMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
                },
                "roughnessMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "textureCoordinateType": {
                  "$ref": "#/definitions/TextureCoordinateType",
                  "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                },
                "vertexColors": {
                  "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
                  "type": "boolean"
                },
                "wireframe": {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "bumpMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
            },
            "bumpMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "depthTest": {
              "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "displacementMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
            },
            "displacementMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "emissive": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
              "format": "color-hex"
            },
            "emissiveIntensity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
            },
            "emissiveMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
            },
            "emissiveMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "map": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ]
            },
            "mapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metalness": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
            },
            "metalnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
            },
            "metalnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "normalMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
            },
            "normalMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "normalMapType": {
              "type": "number"
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
            },
            "refractionRatio": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "roughness": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `1.0`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
            },
            "roughnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
            },
            "roughnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "standard"
              ],
              "type": "string"
            },
            "textureCoordinateType": {
              "$ref": "#/definitions/TextureCoordinateType",
              "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "vertexColors": {
              "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
              "type": "boolean"
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "caps": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Circle%22)%3E",
                  "description": "Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n`\"Circle\"`."
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "lineColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                "lineFadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                "lineFadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Width of line in meters for different zoom levels."
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                "polygonOffset": {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                "polygonOffsetFactor": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                "polygonOffsetUnits": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "shading": {
                  "description": "A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\nis \"Basic\".\n\n`\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n`\"standard\"`: Elaborate shading, with metalness, and roughness.\n\nTODO: is this TechniqueParams or Style prop ?",
                  "enum": [
                    "basic"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                },
                "wireframe": {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "caps": {
              "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Circle%22)%3E",
              "description": "Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n`\"Circle\"`."
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "lineColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Sets the polygon outline color.",
              "format": "color-hex"
            },
            "lineFadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
            },
            "lineFadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Width of line in meters for different zoom levels."
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Sets the polygon offset factor. Default is 0."
            },
            "polygonOffsetUnits": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Sets the polygon offset units. Default is 0."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "shading": {
              "description": "A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\nis \"Basic\".\n\n`\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n`\"standard\"`: Elaborate shading, with metalness, and roughness.\n\nTODO: is this TechniqueParams or Style prop ?",
              "enum": [
                "basic"
              ],
              "type": "string"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "extruded-line"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).",
              "type": "boolean"
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "alphaMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
            },
            "alphaMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "alphaTest": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
            },
            "attr": {
              "additionalProperties": false,
              "properties": {
                "alphaMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
                },
                "alphaMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "alphaTest": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
                },
                "bumpMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
                },
                "bumpMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "caps": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Circle%22)%3E",
                  "description": "Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n`\"Circle\"`."
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
                  "format": "color-hex"
                },
                "depthTest": {
                  "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
                  "type": "boolean"
                },
                "displacementMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
                },
                "displacementMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "emissive": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
                  "format": "color-hex"
                },
                "emissiveIntensity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
                },
                "emissiveMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
                },
                "emissiveMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "lineColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                "lineFadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                "lineFadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Width of a line in meters for different zoom levels."
                },
                "map": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ]
                },
                "mapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "metalness": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
                },
                "metalnessMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
                },
                "metalnessMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "normalMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
                },
                "normalMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "normalMapType": {
                  "type": "number"
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
                },
                "polygonOffset": {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                "polygonOffsetFactor": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                "polygonOffsetUnits": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                "refractionRatio": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "roughness": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `1.0`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
                },
                "roughnessMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
                },
                "roughnessMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "shading": {
                  "description": "A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\nDefault is `\"basic\"`.\n\n`\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n`\"standard\"` : Elaborate shading, with metalness, and roughness.",
                  "enum": [
                    "standard"
                  ],
                  "type": "string"
                },
                "textureCoordinateType": {
                  "$ref": "#/definitions/TextureCoordinateType",
                  "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                },
                "vertexColors": {
                  "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
                  "type": "boolean"
                },
                "wireframe": {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "bumpMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
            },
            "bumpMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "caps": {
              "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Circle%22)%3E",
              "description": "Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n`\"Circle\"`."
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "depthTest": {
              "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "displacementMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
            },
            "displacementMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "emissive": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
              "format": "color-hex"
            },
            "emissiveIntensity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
            },
            "emissiveMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
            },
            "emissiveMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "lineColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Sets the polygon outline color.",
              "format": "color-hex"
            },
            "lineFadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
            },
            "lineFadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Width of a line in meters for different zoom levels."
            },
            "map": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ]
            },
            "mapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metalness": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
            },
            "metalnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
            },
            "metalnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "normalMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
            },
            "normalMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "normalMapType": {
              "type": "number"
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Sets the polygon offset factor. Default is 0."
            },
            "polygonOffsetUnits": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Sets the polygon offset units. Default is 0."
            },
            "refractionRatio": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "roughness": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `1.0`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
            },
            "roughnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
            },
            "roughnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "shading": {
              "description": "A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\nDefault is `\"basic\"`.\n\n`\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n`\"standard\"` : Elaborate shading, with metalness, and roughness.",
              "enum": [
                "standard"
              ],
              "type": "string"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "extruded-line"
              ],
              "type": "string"
            },
            "textureCoordinateType": {
              "$ref": "#/definitions/TextureCoordinateType",
              "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "vertexColors": {
              "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
              "type": "boolean"
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "alphaMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
            },
            "alphaMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "alphaTest": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
            },
            "animateExtrusion": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Animate the extrusion of the buildings if set to `true`."
            },
            "animateExtrusionDuration": {
              "description": "Duration of the building's extrusion in milliseconds",
              "type": "number"
            },
            "attr": {
              "additionalProperties": false,
              "properties": {
                "alphaMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
                },
                "alphaMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "alphaTest": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
                },
                "animateExtrusion": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Animate the extrusion of the buildings if set to `true`."
                },
                "animateExtrusionDuration": {
                  "description": "Duration of the building's extrusion in milliseconds",
                  "type": "number"
                },
                "boundaryWalls": {
                  "description": "If `true`, wall geometry will is added along the tile boundaries. Note, this causes artifacts\nwhen used with shadows, so it should be known in advance that shadows won't be enabled.",
                  "type": "boolean"
                },
                "bumpMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
                },
                "bumpMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
                  "format": "color-hex"
                },
                "constantHeight": {
                  "description": "If `true`, the height of the extruded buildings will not be modified by the mercator\nprojection distortion that happens around the poles.",
                  "type": "boolean"
                },
                "defaultColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Default color used if feature doesn't provide color attribute\nand [[MapEnv]] did not return it too.",
                  "format": "color-hex"
                },
                "defaultHeight": {
                  "description": "In some data sources, for example Tilezen, building extrusion information might be missing.\nThis attribute allows to define a default height of an extruded polygon in the theme.",
                  "type": "number"
                },
                "depthTest": {
                  "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
                  "type": "boolean"
                },
                "displacementMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
                },
                "displacementMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "emissive": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
                  "format": "color-hex"
                },
                "emissiveIntensity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
                },
                "emissiveMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
                },
                "emissiveMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "enableDepthPrePass": {
                  "description": "Control rendering of depth prepass before the actual geometry.\n\nDepth prepass is a method to render translucent meshes, hence only the visible front faces of\na mesh are actually rendered, removing artifacts caused by blending with internal faces of\nthe mesh. This method is used for drawing translucent buildings over map background.\n\nBy default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n`false` forcefully disables depth prepass.",
                  "type": "boolean"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "floorHeight": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Height of \"floor\" of extruded polygon in world units of extruded polygon.\n\nUsually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`."
                },
                "footprint": {
                  "description": "Renders the footprint lines if set to 'true'.",
                  "type": "boolean"
                },
                "height": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Height above ground in world units of extruded polygon.\n\nUsually, unique per feature, so defaults to `[\"get\", \"height\"]`."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "lineColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "lineColorMix": {
                  "description": "Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).",
                  "type": "number"
                },
                "lineFadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                "lineFadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Width of the lines. Currently limited to the [0, 1] range."
                },
                "map": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ]
                },
                "mapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "maxSlope": {
                  "description": "Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\nto modulate the amount of vertical lines rendered.",
                  "type": "number"
                },
                "metalness": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
                },
                "metalnessMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
                },
                "metalnessMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "normalMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
                },
                "normalMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "normalMapType": {
                  "type": "number"
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
                },
                "refractionRatio": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "roughness": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `1.0`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
                },
                "roughnessMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
                },
                "roughnessMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "textureCoordinateType": {
                  "$ref": "#/definitions/TextureCoordinateType",
                  "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                },
                "vertexColors": {
                  "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
                  "type": "boolean"
                },
                "wireframe": {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "boundaryWalls": {
              "description": "If `true`, wall geometry will is added along the tile boundaries. Note, this causes artifacts\nwhen used with shadows, so it should be known in advance that shadows won't be enabled.",
              "type": "boolean"
            },
            "bumpMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
            },
            "bumpMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
              "format": "color-hex"
            },
            "constantHeight": {
              "description": "If `true`, the height of the extruded buildings will not be modified by the mercator\nprojection distortion that happens around the poles.",
              "type": "boolean"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "defaultColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Default color used if feature doesn't provide color attribute\nand [[MapEnv]] did not return it too.",
              "format": "color-hex"
            },
            "defaultHeight": {
              "description": "In some data sources, for example Tilezen, building extrusion information might be missing.\nThis attribute allows to define a default height of an extruded polygon in the theme.",
              "type": "number"
            },
            "depthTest": {
              "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "displacementMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
            },
            "displacementMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "emissive": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
              "format": "color-hex"
            },
            "emissiveIntensity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
            },
            "emissiveMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
            },
            "emissiveMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "enableDepthPrePass": {
              "description": "Control rendering of depth prepass before the actual geometry.\n\nDepth prepass is a method to render translucent meshes, hence only the visible front faces of\na mesh are actually rendered, removing artifacts caused by blending with internal faces of\nthe mesh. This method is used for drawing translucent buildings over map background.\n\nBy default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n`false` forcefully disables depth prepass.",
              "type": "boolean"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "floorHeight": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Height of \"floor\" of extruded polygon in world units of extruded polygon.\n\nUsually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`."
            },
            "footprint": {
              "description": "Renders the footprint lines if set to 'true'.",
              "type": "boolean"
            },
            "height": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Height above ground in world units of extruded polygon.\n\nUsually, unique per feature, so defaults to `[\"get\", \"height\"]`."
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "lineColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "lineColorMix": {
              "description": "Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).",
              "type": "number"
            },
            "lineFadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
            },
            "lineFadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Width of the lines. Currently limited to the [0, 1] range."
            },
            "map": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ]
            },
            "mapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "maxSlope": {
              "description": "Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\nto modulate the amount of vertical lines rendered.",
              "type": "number"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metalness": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
            },
            "metalnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
            },
            "metalnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "normalMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
            },
            "normalMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "normalMapType": {
              "type": "number"
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
            },
            "refractionRatio": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "roughness": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `1.0`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
            },
            "roughnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
            },
            "roughnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "extruded-polygon"
              ],
              "type": "string"
            },
            "textureCoordinateType": {
              "$ref": "#/definitions/TextureCoordinateType",
              "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "vertexColors": {
              "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
              "type": "boolean"
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "properties": {
            "attr": {
              "properties": {
                "category": {},
                "enabled": {},
                "fadeFar": {},
                "fadeNear": {},
                "id": {},
                "kind": {},
                "params": {
                  "$ref": "#/definitions/ShaderTechniqueMaterialParameters",
                  "description": "Parameters for shader. See `THREE.ShaderMaterialParameters`."
                },
                "primitive": {
                  "description": "Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n\"mesh\"",
                  "enum": [
                    "point",
                    "line",
                    "segments",
                    "mesh"
                  ],
                  "type": "string"
                },
                "renderOrder": {},
                "transient": {},
                "transparent": {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "category": {},
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "enabled": {},
            "fadeFar": {},
            "fadeNear": {},
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "id": {},
            "kind": {},
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "params": {
              "$ref": "#/definitions/ShaderTechniqueMaterialParameters",
              "description": "Parameters for shader. See `THREE.ShaderMaterialParameters`."
            },
            "primitive": {
              "description": "Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n\"mesh\"",
              "enum": [
                "point",
                "line",
                "segments",
                "mesh"
              ],
              "type": "string"
            },
            "renderOrder": {},
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "shader"
              ],
              "type": "string"
            },
            "transient": {},
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "alphaMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
            },
            "alphaMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "alphaTest": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
            },
            "attr": {
              "additionalProperties": false,
              "properties": {
                "alphaMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
                },
                "alphaMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "alphaTest": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
                },
                "bumpMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
                },
                "bumpMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
                  "format": "color-hex"
                },
                "depthTest": {
                  "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
                  "type": "boolean"
                },
                "displacementMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
                },
                "displacementMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "emissive": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
                  "format": "color-hex"
                },
                "emissiveIntensity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
                },
                "emissiveMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
                },
                "emissiveMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "heightBasedColors": {
                  "$ref": "#/definitions/HeightBasedColors",
                  "description": "Colors to be applied at different heights (as a results of a `displacementMap`)."
                },
                "heightGradientInterpolation": {
                  "description": "If `heightBasedColors` is defined, this value defines the interpolation method used to\ngenerate the height-based gradient texture (defaults to `Discrete`).",
                  "enum": [
                    "Discrete",
                    "Linear",
                    "Cubic"
                  ],
                  "type": "string"
                },
                "heightGradientWidth": {
                  "description": "If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated\ngradient texture (defaults to `128`).",
                  "type": "number"
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "map": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ]
                },
                "mapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "metalness": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
                },
                "metalnessMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
                },
                "metalnessMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "normalMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
                },
                "normalMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "normalMapType": {
                  "type": "number"
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
                },
                "refractionRatio": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "roughness": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `1.0`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
                },
                "roughnessMap": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
                },
                "roughnessMapProperties": {
                  "$ref": "#/definitions/TextureProperties"
                },
                "textureCoordinateType": {
                  "$ref": "#/definitions/TextureCoordinateType",
                  "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "transparent": {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                },
                "vertexColors": {
                  "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
                  "type": "boolean"
                },
                "wireframe": {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "bumpMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
            },
            "bumpMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "depthTest": {
              "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "displacementMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
            },
            "displacementMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "emissive": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
              "format": "color-hex"
            },
            "emissiveIntensity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
            },
            "emissiveMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
            },
            "emissiveMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "heightBasedColors": {
              "$ref": "#/definitions/HeightBasedColors",
              "description": "Colors to be applied at different heights (as a results of a `displacementMap`)."
            },
            "heightGradientInterpolation": {
              "description": "If `heightBasedColors` is defined, this value defines the interpolation method used to\ngenerate the height-based gradient texture (defaults to `Discrete`).",
              "enum": [
                "Discrete",
                "Linear",
                "Cubic"
              ],
              "type": "string"
            },
            "heightGradientWidth": {
              "description": "If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated\ngradient texture (defaults to `128`).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "map": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ]
            },
            "mapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metalness": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
            },
            "metalnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
            },
            "metalnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "normalMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
            },
            "normalMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "normalMapType": {
              "type": "number"
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
            },
            "refractionRatio": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "roughness": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `1.0`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
            },
            "roughnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
            },
            "roughnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "terrain"
              ],
              "type": "string"
            },
            "textureCoordinateType": {
              "$ref": "#/definitions/TextureCoordinateType",
              "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "vertexColors": {
              "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
              "type": "boolean"
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "attr": {
              "additionalProperties": false,
              "properties": {
                "backgroundColor": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "backgroundOpacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Background text opacity value."
                },
                "backgroundSize": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Size of the text background (pixels)."
                },
                "canvasRotation": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "[[TextCanvas]] rotation (radians)."
                },
                "category": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
                },
                "color": {
                  "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
                  "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                "distanceScale": {
                  "description": "Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.",
                  "type": "number"
                },
                "enabled": {
                  "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
                  "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
                },
                "fadeFar": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                "fadeNear": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                "fontName": {
                  "description": "Name of the preferred [[Font]] to be used when rendering.",
                  "type": "string"
                },
                "fontStyle": {
                  "description": "Glyph style to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "Bold",
                    "Italic",
                    "BoldItalic"
                  ],
                  "type": "string"
                },
                "fontVariant": {
                  "description": "Glyph variant to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "AllCaps",
                    "SmallCaps"
                  ],
                  "type": "string"
                },
                "hAlignment": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22Left%22%7C%22Center%22%7C%22Right%22)%3E",
                  "description": "Text position regarding the baseline."
                },
                "id": {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                "kind": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                "label": {
                  "description": "Field name of object containing the text to be rendered.",
                  "type": "string"
                },
                "leading": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Inter-line spacing (pixels). Scaled by `size`."
                },
                "lineRotation": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Line typesetting rotation (radians)."
                },
                "lineWidth": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Maximum line width (pixels)."
                },
                "maxLines": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Maximum number of lines for this label."
                },
                "maxZoomLevel": {
                  "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used.",
                  "type": "number"
                },
                "mayOverlap": {
                  "description": "If `true`, icon is allowed to overlap other labels or icons of lower priority.",
                  "type": "boolean"
                },
                "minZoomLevel": {
                  "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used.",
                  "type": "number"
                },
                "opacity": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                "priority": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Priority of text, defaults to `0`. Elements with highest priority get placed first."
                },
                "renderOrder": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
                },
                "reserveSpace": {
                  "description": "If `true`, element will reserve screen space, other markers of lower priority will not be\nable to overlap.",
                  "type": "boolean"
                },
                "rotation": {
                  "description": "Glyph local rotation (radians).",
                  "type": "number"
                },
                "size": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Size of the text (pixels)."
                },
                "style": {
                  "description": "Name of the text style.",
                  "type": "string"
                },
                "text": {
                  "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
                  "description": "Text to be displayed for feature.\n\nDefaults to first defined:\n  - feature property `label` if present in technique (depreacted);\n  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true;\n  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true;\n  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language;\n  - `[\"get\", \"name\"]`.\n\nSee [[ExtendedTileInfo.getFeatureText]]."
                },
                "textFadeTime": {
                  "description": "Fading time for labels in seconds.",
                  "type": "number"
                },
                "tracking": {
                  "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
                  "description": "Inter-glyph spacing (pixels). Scaled by `size`."
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                "useAbbreviation": {
                  "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
                  "type": "boolean"
                },
                "useIsoCode": {
                  "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
                  "type": "boolean"
                },
                "vAlignment": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22Above%22%7C%22Center%22%7C%22Below%22)%3E",
                  "description": "Text position inside a line."
                },
                "wrappingMode": {
                  "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Character%22%7C%22Word%22)%3E",
                  "description": "Wrapping (line-breaking) mode."
                },
                "xOffset": {
                  "description": "Horizontal offset (to the right) in screen pixels.",
                  "type": "number"
                },
                "yOffset": {
                  "description": "Vertical offset (up) in screen pixels.",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "backgroundColor": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "backgroundOpacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Background text opacity value."
            },
            "backgroundSize": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Size of the text background (pixels)."
            },
            "canvasRotation": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "[[TextCanvas]] rotation (radians)."
            },
            "category": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "The category of this technique.\n\nThe category is used in conjunction with [[Theme.priorities]]\nto assign render orders to the objects created by this [[Style]]."
            },
            "color": {
              "$ref": "#/definitions/DynamicProperty%3CStyleColor%3E",
              "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "distanceScale": {
              "description": "Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.",
              "type": "number"
            },
            "enabled": {
              "$ref": "#/definitions/DynamicProperty%3Cboolean%3E",
              "description": "Runtime filtering of techniques.\n\nUse with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc."
            },
            "fadeFar": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
            },
            "fadeNear": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "fontName": {
              "description": "Name of the preferred [[Font]] to be used when rendering.",
              "type": "string"
            },
            "fontStyle": {
              "description": "Glyph style to apply for the currently active [[Font]].",
              "enum": [
                "Regular",
                "Bold",
                "Italic",
                "BoldItalic"
              ],
              "type": "string"
            },
            "fontVariant": {
              "description": "Glyph variant to apply for the currently active [[Font]].",
              "enum": [
                "Regular",
                "AllCaps",
                "SmallCaps"
              ],
              "type": "string"
            },
            "hAlignment": {
              "$ref": "#/definitions/DynamicProperty%3C(%22Left%22%7C%22Center%22%7C%22Right%22)%3E",
              "description": "Text position regarding the baseline."
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "kind": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GeometryKind"
                },
                {
                  "$ref": "#/definitions/GeometryKindSet"
                }
              ],
              "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
            },
            "label": {
              "description": "Field name of object containing the text to be rendered.",
              "type": "string"
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "leading": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Inter-line spacing (pixels). Scaled by `size`."
            },
            "lineRotation": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Line typesetting rotation (radians)."
            },
            "lineWidth": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Maximum line width (pixels)."
            },
            "maxLines": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Maximum number of lines for this label."
            },
            "maxZoomLevel": {
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used.",
              "type": "number"
            },
            "mayOverlap": {
              "description": "If `true`, icon is allowed to overlap other labels or icons of lower priority.",
              "type": "boolean"
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used.",
              "type": "number"
            },
            "opacity": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
            },
            "priority": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Priority of text, defaults to `0`. Elements with highest priority get placed first."
            },
            "renderOrder": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file."
            },
            "reserveSpace": {
              "description": "If `true`, element will reserve screen space, other markers of lower priority will not be\nable to overlap.",
              "type": "boolean"
            },
            "rotation": {
              "description": "Glyph local rotation (radians).",
              "type": "number"
            },
            "size": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Size of the text (pixels)."
            },
            "style": {
              "description": "Name of the text style.",
              "type": "string"
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "text"
              ],
              "type": "string"
            },
            "text": {
              "$ref": "#/definitions/DynamicProperty%3Cstring%3E",
              "description": "Text to be displayed for feature.\n\nDefaults to first defined:\n  - feature property `label` if present in technique (depreacted);\n  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true;\n  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true;\n  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language;\n  - `[\"get\", \"name\"]`.\n\nSee [[ExtendedTileInfo.getFeatureText]]."
            },
            "textFadeTime": {
              "description": "Fading time for labels in seconds.",
              "type": "number"
            },
            "tracking": {
              "$ref": "#/definitions/DynamicProperty%3Cnumber%3E",
              "description": "Inter-glyph spacing (pixels). Scaled by `size`."
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "useAbbreviation": {
              "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
              "type": "boolean"
            },
            "useIsoCode": {
              "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
              "type": "boolean"
            },
            "vAlignment": {
              "$ref": "#/definitions/DynamicProperty%3C(%22Above%22%7C%22Center%22%7C%22Below%22)%3E",
              "description": "Text position inside a line."
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            },
            "wrappingMode": {
              "$ref": "#/definitions/DynamicProperty%3C(%22None%22%7C%22Character%22%7C%22Word%22)%3E",
              "description": "Wrapping (line-breaking) mode."
            },
            "xOffset": {
              "description": "Horizontal offset (to the right) in screen pixels.",
              "type": "number"
            },
            "yOffset": {
              "description": "Vertical offset (up) in screen pixels.",
              "type": "number"
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "properties": {
            "attr": {
              "type": "object"
            },
            "category": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "The category of this style."
            },
            "debug": {
              "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
              "type": "boolean"
            },
            "description": {
              "description": "Human readable description.",
              "type": "string"
            },
            "final": {
              "description": "Optional. If `true`, no more matching styles will be evaluated.",
              "type": "boolean"
            },
            "labelProperty": {
              "description": "XYZ defines the property to display as text label of a feature in the styles.",
              "type": "string"
            },
            "layer": {
              "description": "The layer containing the carto features processed by this style rule.",
              "type": "string"
            },
            "maxZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "minZoomLevel": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used."
            },
            "renderOrder": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Specify `renderOrder` of value."
            },
            "styleSet": {
              "description": "The style set referenced by this styling rule.",
              "type": "string"
            },
            "technique": {
              "description": "The name of the technique to use.",
              "enum": [
                "none"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
              "type": "boolean"
            },
            "when": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/JsonExpr"
                }
              ],
              "description": "Condition when this style rule applies."
            }
          },
          "required": [
            "technique",
            "when"
          ],
          "type": "object"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        }
      ],
      "description": "Compound type that merges all raw [Style] with selector arguments from [BaseSelector], optionally\na [[Reference]]."
    },
    "StyleLength": {
      "description": "Length literals.",
      "type": [
        "string",
        "number"
      ]
    },
    "StylePriority": {
      "additionalProperties": false,
      "description": "A type representing symbolic render orders.",
      "properties": {
        "category": {
          "description": "The category of this [[StylePriority]].",
          "type": "string"
        },
        "group": {
          "description": "The group of this [[StylePriority]].",
          "type": "string"
        }
      },
      "required": [
        "group"
      ],
      "type": "object"
    },
    "StyleSet": {
      "description": "An array of [[StyleSelector]]s that are used together to define how a [[DataSource]] should be\nrendered. `StyleSet`s are applied to sources providing vector tiles via their method\n`setStyleSet`. This is also handle internally when a whole theme is passed to a [[MapView]] via\n`mapview.theme`.",
      "items": {
        "$ref": "#/definitions/StyleDeclaration"
      },
      "type": "array"
    },
    "Styles": {
      "additionalProperties": {
        "$ref": "#/definitions/StyleSet"
      },
      "description": "A dictionary of [[StyleSet]]s.",
      "type": "object"
    },
    "TextStyleDefinition": {
      "additionalProperties": false,
      "description": "Various text styles used with labels and texts.",
      "properties": {
        "backgroundColor": {
          "format": "color-hex",
          "type": "string"
        },
        "backgroundOpacity": {
          "type": "number"
        },
        "backgroundSize": {
          "type": "number"
        },
        "canvasRotation": {
          "type": "number"
        },
        "color": {
          "format": "color-hex",
          "type": "string"
        },
        "fontCatalogName": {
          "type": "string"
        },
        "fontName": {
          "type": "string"
        },
        "fontStyle": {
          "enum": [
            "Regular",
            "Bold",
            "Italic",
            "BoldItalic"
          ],
          "type": "string"
        },
        "fontVariant": {
          "enum": [
            "Regular",
            "AllCaps",
            "SmallCaps"
          ],
          "type": "string"
        },
        "hAlignment": {
          "enum": [
            "Left",
            "Center",
            "Right"
          ],
          "type": "string"
        },
        "leading": {
          "type": "number"
        },
        "lineRotation": {
          "type": "number"
        },
        "lineWidth": {
          "type": "number"
        },
        "maxLines": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "opacity": {
          "type": "number"
        },
        "placements": {
          "format": "comma separated list of placement tokens, i.e. \"TR, TL, C\"",
          "type": "string"
        },
        "rotation": {
          "type": "number"
        },
        "size": {
          "type": "number"
        },
        "tracking": {
          "type": "number"
        },
        "vAlignment": {
          "enum": [
            "Above",
            "Center",
            "Below"
          ],
          "type": "string"
        },
        "wrappingMode": {
          "enum": [
            "None",
            "Character",
            "Word"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TextureBuffer": {
      "additionalProperties": false,
      "description": "Buffer holding a texture.",
      "properties": {
        "buffer": {
          "additionalProperties": false,
          "description": "Buffer containing the (compressed) image or the raw texture data.",
          "properties": {
            "byteLength": {
              "type": "number"
            }
          },
          "required": [
            "byteLength"
          ],
          "type": "object"
        },
        "dataTextureProperties": {
          "$ref": "#/definitions/DataTextureProperties",
          "description": "Properties for creating a three.js DataTexture\n(https://threejs.org/docs/#api/en/textures/DataTexture)."
        },
        "type": {
          "description": "Mime type of the image or 'image/raw' in case of raw texture data.",
          "type": "string"
        }
      },
      "required": [
        "buffer",
        "type"
      ],
      "type": "object"
    },
    "TextureCoordinateType": {
      "enum": [
        "tile-space",
        "equirectangular-space",
        "feature-space"
      ],
      "type": "string"
    },
    "TextureDataType": {
      "enum": [
        "UnsignedByte",
        "Byte",
        "Short",
        "UnsignedShort",
        "Int",
        "UnsignedInt",
        "Float",
        "HalfFloat"
      ],
      "type": "string"
    },
    "TextureProperties": {
      "additionalProperties": false,
      "description": "Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).",
      "properties": {
        "flipY": {
          "description": "Flip texture vertically.\nSee: https://threejs.org/docs/#api/en/textures/Texture.flipY.",
          "type": "boolean"
        },
        "magFilter": {
          "$ref": "#/definitions/MagFilter",
          "description": "Texture magnification filter."
        },
        "minFilter": {
          "$ref": "#/definitions/MinFilter",
          "description": "Texture minification filter."
        },
        "repeatU": {
          "description": "Texture horizontal repetition rate.\nSee: https://threejs.org/docs/#api/en/textures/Texture.repeat.",
          "type": "number"
        },
        "repeatV": {
          "description": "Texture vertical repetition rate.\nSee: https://threejs.org/docs/#api/en/textures/Texture.repeat.",
          "type": "number"
        },
        "wrapS": {
          "$ref": "#/definitions/WrappingMode",
          "description": "Texture horizontal wrapping mode.\nSee: https://threejs.org/docs/#api/en/textures/Texture.wrapS."
        },
        "wrapT": {
          "$ref": "#/definitions/WrappingMode",
          "description": "Texture vertical wrapping mode.\nSee: https://threejs.org/docs/#api/en/textures/Texture.wrapT."
        }
      },
      "type": "object"
    },
    "Theme": {
      "additionalProperties": false,
      "description": "Map theme is used to define what features are shown and how the map is styled, for example\nwhich lightning is used or whether fog should be displayed.",
      "properties": {
        "$schema": {
          "description": "The URI of the JSON schema describing themes.",
          "type": "string"
        },
        "clearAlpha": {
          "description": "Alpha to be used as a clear background - no map objects.",
          "format": "0-1",
          "type": "number"
        },
        "clearColor": {
          "description": "Color to be used as a clear background - no map objects.",
          "format": "color-hex",
          "type": "string"
        },
        "defaultTextStyle": {
          "$ref": "#/definitions/TextStyleDefinition",
          "description": "Define the default text style for styling labels and texts."
        },
        "definitions": {
          "$ref": "#/definitions/Definitions",
          "description": "The definitions exported by these theme."
        },
        "extends": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Theme"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Theme"
                  }
                ]
              },
              "type": "array"
            }
          ],
          "description": "The base `Theme`s or `theme` URLs to extend."
        },
        "fog": {
          "$ref": "#/definitions/Fog",
          "description": "Define the fog used in the map scene."
        },
        "fontCatalogs": {
          "description": "List available fonts to be used while rendering text.",
          "items": {
            "$ref": "#/definitions/FontCatalogConfig"
          },
          "type": "array"
        },
        "imageTextures": {
          "description": "Image textures to be used while rendering geometries on the map view.",
          "items": {
            "$ref": "#/definitions/ImageTexture"
          },
          "type": "array"
        },
        "images": {
          "$ref": "#/definitions/ImageDefinitions",
          "description": "Optional images to be rendered on the map view."
        },
        "labelPriorities": {
          "description": "Optional list of priorities for the screen-space\nobjects created using this style.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lights": {
          "description": "Define the lightning available on the three.js scene.",
          "items": {
            "$ref": "#/definitions/Light"
          },
          "type": "array"
        },
        "poiTables": {
          "description": "Optional list of [[ThemePoiTableDef]]s.",
          "items": {
            "$ref": "#/definitions/PoiTableRef"
          },
          "type": "array"
        },
        "priorities": {
          "description": "Optional list of symbolic priorities for the object\ncreated using this {@link Theme}.",
          "items": {
            "$ref": "#/definitions/StylePriority"
          },
          "type": "array"
        },
        "sky": {
          "$ref": "#/definitions/Sky",
          "description": "Define the style of the sky presented in the map scene."
        },
        "styles": {
          "$ref": "#/definitions/Styles",
          "description": "Map styles available for datasources used to render the map."
        },
        "textStyles": {
          "description": "Define the style to render different types of text used on the map.",
          "items": {
            "$ref": "#/definitions/TextStyleDefinition"
          },
          "type": "array"
        },
        "url": {
          "description": "Actual URL the theme has been loaded from.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Vector3Like": {
      "additionalProperties": false,
      "description": "Interface representing a Vector3.",
      "properties": {
        "x": {
          "description": "The X position.",
          "type": "number"
        },
        "y": {
          "description": "The Y position.",
          "type": "number"
        },
        "z": {
          "description": "The Z position.",
          "type": "number"
        }
      },
      "required": [
        "x",
        "y",
        "z"
      ],
      "type": "object"
    },
    "WrappingMode": {
      "description": "Available texture wrapping modes.",
      "enum": [
        "clamp",
        "repeat",
        "mirror"
      ],
      "type": "string"
    }
  }
} 