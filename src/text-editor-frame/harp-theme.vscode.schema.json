{
  "$ref": "#/definitions/Theme",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AmbientLight": {
      "additionalProperties": false,
      "defaultSnippets": [
        {
          "body": {
            "color": "#${2:fff}",
            "intensity": "^${3:1}",
            "name": "${1:ambient light}",
            "type": "ambient"
          },
          "description": "Adds a new Ambient Light",
          "label": "New Ambient Light"
        }
      ],
      "description": "Light type: ambient.",
      "properties": {
        "color": {
          "format": "color-hex",
          "type": "string"
        },
        "intensity": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "ambient"
          ],
          "type": "string"
        }
      },
      "required": [
        "color",
        "name",
        "type"
      ],
      "type": "object"
    },
    "Attr<BaseTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<BasicExtrudedLineTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "caps": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n`\"Circle\"`.",
                  "enum": [
                    "None",
                    "Circle"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<StyleColor>",
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<number>",
              "description": "Width of line in meters for different zoom levels."
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetFactor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetUnits": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "shading": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\nis \"Basic\".\n\n`\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n`\"standard\"`: Elaborate shading, with metalness, and roughness.\n\nTODO: is this TechniqueParams or Style prop ?",
                  "enum": [
                    "basic"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "wireframe": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<DashedLineTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "caps": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/LineCaps",
                  "description": "Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\nDefault is `\"Round\"`."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "clipping": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Clip the line outside the tile if `true`.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<StyleColor>",
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "dashColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of a line dashes in hexadecimal or CSS-style notation,\nfor example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "dashSize": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleLength>",
                  "description": "Length of a line in meters for different zoom levels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "gapSize": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleLength>",
                  "description": "Size of a gap between lines in meters for different zoom levels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<StyleLength>",
              "description": "Width of a line in `metricUnit`s for different zoom levels."
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metricUnit": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "outlineColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of a line outline in hexadecimal or CSS-style notation,\nfor example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "outlineWidth": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleLength>",
                  "description": "Outline width of a line in `metricUnit`s for different zoom levels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetFactor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetUnits": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<ExtrudedPolygonTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "alphaMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "alphaMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "alphaTest": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "animateExtrusion": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<boolean>",
                  "description": "Animate the extrusion of the buildings if set to `true`."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "animateExtrusionDuration": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Duration of the building's extrusion in milliseconds",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "boundaryWalls": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `false`, wall geometry will not be added along the tile boundaries.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "bumpMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "bumpMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "constantHeight": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, the height of the extruded buildings will not be modified by the mercator\nprojection distortion that happens around the poles.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "defaultColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Default color used if feature doesn't provide color attribute\nand [[MapEnv]] did not return it too.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "defaultHeight": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "In some data sources, for example Tilezen, building extrusion information might be missing.\nThis attribute allows to define a default height of an extruded polygon in the theme.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "depthTest": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "displacementMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "displacementMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissive": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveIntensity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enableDepthPrePass": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Control rendering of depth prepass before the actual geometry.\n\nDepth prepass is a method to render translucent meshes, hence only the visible front faces of\na mesh are actually rendered, removing artifacts caused by blending with internal faces of\nthe mesh. This method is used for drawing translucent buildings over map background.\n\nBy default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n`false` forcefully disables depth prepass.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "floorHeight": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Height of \"floor\" of extruded polygon in world units of extruded polygon.\n\nUsually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "footprint": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Renders the footprint lines if set to 'true'.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "height": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Height above ground in world units of extruded polygon.\n\nUsually, unique per feature, so defaults to `[\"get\", \"height\"]`.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineColorMix": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<number>",
              "description": "Width of the lines. Currently limited to the [0, 1] range."
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "map": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ]
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "mapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "maxSlope": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\nto modulate the amount of vertical lines rendered.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalness": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.5`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalnessMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalnessMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMapType": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "refractionRatio": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughness": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `0.5`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughnessMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughnessMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textureCoordinateType": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureCoordinateType",
                  "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "vertexColors": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "wireframe": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<FillTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "color": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Width of the lines. Currently limited to the [0, 1] range."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetFactor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetUnits": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "wireframe": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<MarkerTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "alwaysOnTop": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, the label will always be rendered on top. If overlapping with other labels with\nthis flag set, the render order is undefined.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "backgroundColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "backgroundOpacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Background text opacity value."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "backgroundSize": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Size of the text background (pixels)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "canvasRotation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "[[TextCanvas]] rotation (radians).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "distanceScale": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fontName": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Name of the preferred [[Font]] to be used when rendering.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fontStyle": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Glyph style to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "Bold",
                    "Italic",
                    "BoldItalic"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fontVariant": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Glyph variant to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "AllCaps",
                    "SmallCaps"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "hAlignment": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<(\"Left\"|\"Center\"|\"Right\")>",
                  "description": "Text position regarding the baseline."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconFadeTime": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Fading time for icons in seconds.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconIsOptional": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If true, the text will appear even if the icon cannot be rendered because of missing icon\ngraphics. Defaults to `true`.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconMaxZoomLevel": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Maximum zoomLevel at which to display the label icon. No default.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconMayOverlap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\nproperty value from `textMayOverlap` will be used.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconMinZoomLevel": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Minimum zoomLevel at which to display the label icon. No default.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconReserveSpace": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\ndefined, the property value from `iconReserveSpace` will be used.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconScale": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Scaling factor of icon.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconXOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Horizontal offset (to the right) in screen pixels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "iconYOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Vertical offset (up) in screen pixels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "imageTexture": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Name of [[ImageTexture]] definition to use.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "imageTextureField": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Field name to extract imageTexture content from.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "imageTexturePostfix": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Postfix for `imageTexture` if `imageTextureField` is used.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "imageTexturePrefix": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Prefix for `imageTexture` if `imageTextureField` is used.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "label": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Field name of object containing the text to be rendered.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "leading": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Inter-line spacing (pixels). Scaled by `size`.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineRotation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Line typesetting rotation (radians).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Maximum line width (pixels).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "maxLines": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Maximum number of lines for this label.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "minDistance": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Minimal distance between markers in screen pixels.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "poiName": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\nsupercedes any value read from the field referenced in `poiNameField`.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "poiNameField": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Name of the field to evaluate to get the name of the POI options in the POI table.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "poiTable": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Name of the POI table which should be used for this POI.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "priority": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Priority of marker, defaults to `0`. Markers with highest priority get placed first."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderTextDuringMovements": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `false`, text will not be rendered during animations. Defaults to `true`.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "rotation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Glyph local rotation (radians).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "screenHeight": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Vertical height in pixels, controls vertical scaling. Overrides `iconScale`."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "screenWidth": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "showOnMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Should be displayed on map or not. Defaults to `true`.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "size": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Size of the text (pixels)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "stackMode": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/PoiStackMode",
                  "description": "Specify stack mode. Defaults to `ShowInStack`."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "style": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Name of the text style.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "text": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Text to be displayed for feature.\n\nDefaults to first defined:\n  - feature property `label` if present in technique (depreacted)\n  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n  - `[\"get\", \"name\"]`\n\nSee [[ExtendedTileInfo.getFeatureText]]",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textFadeTime": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Fading time for labels in seconds.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textIsOptional": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n`false`.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textMaxZoomLevel": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Maximum zoomLevel at which to display the label text. No default.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textMayOverlap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `false`, text may overlap markers.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textMinZoomLevel": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Minimum zoomLevel at which to display the label text. No default.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textReserveSpace": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `false`, text will not reserve screen space, other markers will be able to overlap.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "tracking": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Inter-glyph spacing (pixels). Scaled by `size`.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "useAbbreviation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "useIsoCode": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "vAlignment": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<(\"Above\"|\"Center\"|\"Below\")>",
                  "description": "Text position inside a line."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "wrappingMode": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Wrapping (line-breaking) mode.",
                  "enum": [
                    "None",
                    "Character",
                    "Word"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "xOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Horizontal offset (to the right) in screen pixels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "yOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Vertical offset (up) in screen pixels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<PointTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "color": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enablePicking": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Whether to enable picking on these points.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "size": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Size of point in pixels.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "texture": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "URL of a texture image to be loaded.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<SegmentsTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "color": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<StyleColor>",
              "description": "Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.",
              "format": "color-hex"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<number>",
              "description": "Width of a line in meters."
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<ShaderTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "params": {
          "anyOf": [
            {
              "$ref": "#/definitions/ShaderTechniqueMaterialParameters",
              "description": "Parameters for shader. See `THREE.ShaderMaterialParameters`."
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "primitive": {
          "anyOf": [
            {
              "description": "Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n\"mesh\"",
              "enum": [
                "point",
                "line",
                "segments",
                "mesh"
              ],
              "type": "string"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<SolidLineTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "caps": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/LineCaps",
                  "description": "Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\nDefault is `\"Round\"`."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "clipping": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Clip the line outside the tile if `true`.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<StyleColor>",
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "format": "color-hex"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<StyleLength>",
              "description": "Width of a line in `metricUnit` for different zoom levels."
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metricUnit": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "outlineColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of a line outline in hexadecimal or CSS-style notation,\nfor example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "outlineWidth": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleLength>",
                  "description": "Outline width of a line in `metricUnit`s for different zoom levels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetFactor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetUnits": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "secondaryColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n`\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "secondaryRenderOrder": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The render order of the secondary line geometry object created using this technique.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "secondaryWidth": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleLength>",
                  "description": "Width of secondary line geometry in `metricUnit`s for different zoom levels."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<StandardExtrudedLineTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "alphaMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "alphaMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "alphaTest": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "bumpMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "bumpMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "caps": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n`\"Circle\"`.",
                  "enum": [
                    "None",
                    "Circle"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "depthTest": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "displacementMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "displacementMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissive": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveIntensity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Sets the polygon outline color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineFadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicProperty<number>",
              "description": "Width of a line in meters for different zoom levels."
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "map": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ]
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "mapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalness": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.5`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalnessMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalnessMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMapType": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetFactor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset factor. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "polygonOffsetUnits": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Sets the polygon offset units. Default is 0."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "refractionRatio": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughness": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `0.5`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughnessMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughnessMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "shading": {
          "anyOf": [
            {
              "description": "A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\nDefault is `\"basic\"`.\n\n`\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n`\"standard\"` : Elaborate shading, with metalness, and roughness.",
              "enum": [
                "standard"
              ],
              "type": "string"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textureCoordinateType": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureCoordinateType",
                  "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "vertexColors": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "wireframe": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<StandardTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "alphaMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "alphaMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "alphaTest": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "bumpMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "bumpMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "depthTest": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "displacementMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "displacementMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissive": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveIntensity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "map": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ]
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "mapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalness": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.5`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalnessMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalnessMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMapType": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "refractionRatio": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughness": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `0.5`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughnessMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughnessMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textureCoordinateType": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureCoordinateType",
                  "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "vertexColors": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "wireframe": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<TerrainTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "alphaMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "alphaMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "alphaTest": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "bumpMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "bumpMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "depthTest": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "displacementMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "displacementMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissive": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveIntensity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "emissiveMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "heightBasedColors": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/HeightBasedColors",
                  "description": "Colors to be applied at different heights (as a results of a `displacementMap`)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "heightGradientInterpolation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `heightBasedColors` is defined, this value defines the interpolation method used to\ngenerate the height-based gradient texture (defaults to `Discrete`).",
                  "enum": [
                    "Discrete",
                    "Linear",
                    "Cubic"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "heightGradientWidth": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated\ngradient texture (defaults to `128`).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "map": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ]
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "mapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalness": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.5`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalnessMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "metalnessMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "normalMapType": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "refractionRatio": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughness": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `0.5`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughnessMap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/TextureBuffer"
                    }
                  ],
                  "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "roughnessMapProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureProperties"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textureCoordinateType": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextureCoordinateType",
                  "description": "Whether and how texture coordinates should be generated. No texture coordinates are\ngenerated if `undefined`.\nShould be set if any texture assigned (e.g. `map`, `normalMap`, ...)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transparent": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "vertexColors": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "wireframe": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "Attr<TextTechniqueParams>": {
      "additionalProperties": false,
      "description": "A reference to a style definition.\n\nUse as value `attrs` to reference value from `definitions`.\n\nExample of usage:\n```json\n{\n   \"definitions\": {\n     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n   },\n   \"styles\": { \"tilezen\": [\n      {\n       \"when\": \"kind == 'road\",\n       \"technique\": \"solid-line\",\n       \"attr\": {\n         \"lineColor\": { \"$ref\": \"roadColor\" }\n       }\n     }\n   ] }\n}\n ``` \n The attributes of a technique.",
      "properties": {
        "backgroundColor": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "backgroundOpacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Background text opacity value."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "backgroundSize": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Size of the text background (pixels)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "canvasRotation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "[[TextCanvas]] rotation (radians).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "color": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<StyleColor>",
                  "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
                  "format": "color-hex"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "distanceScale": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "enabled": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n`false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeFar": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. An undefined value disables fading."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fadeNear": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fontName": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Name of the preferred [[Font]] to be used when rendering.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fontStyle": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Glyph style to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "Bold",
                    "Italic",
                    "BoldItalic"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "fontVariant": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Glyph variant to apply for the currently active [[Font]].",
                  "enum": [
                    "Regular",
                    "AllCaps",
                    "SmallCaps"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "hAlignment": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Text position regarding the baseline.",
                  "enum": [
                    "Left",
                    "Center",
                    "Right"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "id": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "The name used to identify materials created from this technique.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "kind": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/GeometryKind"
                    },
                    {
                      "$ref": "#/definitions/GeometryKindSet"
                    }
                  ],
                  "description": "Specified kind of geometry. One kind is set as default in the technique, and can be\noverridden in the style."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "label": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Field name of object containing the text to be rendered.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "leading": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Inter-line spacing (pixels). Scaled by `size`.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineRotation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Line typesetting rotation (radians).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "lineWidth": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Maximum line width (pixels).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "maxLines": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Maximum number of lines for this label.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "maxZoomLevel": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "mayOverlap": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, icon is allowed to overlap other labels or icons of lower priority.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "minZoomLevel": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "opacity": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "priority": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Priority of text, defaults to `0`. Elements with highest priority get placed first."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrder": {
          "anyOf": [
            {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\nvalues according to style position in file.",
              "type": "number"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "renderOrderOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "reserveSpace": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, element will reserve screen space, other markers of lower priority will not be\nable to overlap.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "rotation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Glyph local rotation (radians).",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "size": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/DynamicProperty<number>",
                  "description": "Size of the text (pixels)."
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "style": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Name of the text style.",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "text": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Text to be displayed for feature.\n\nDefaults to first defined:\n  - feature property `label` if present in technique (depreacted);\n  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true;\n  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true;\n  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language;\n  - `[\"get\", \"name\"]`.\n\nSee [[ExtendedTileInfo.getFeatureText]].",
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "textFadeTime": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Fading time for labels in seconds.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "tracking": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Inter-glyph spacing (pixels). Scaled by `size`.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "transient": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "useAbbreviation": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "useIsoCode": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
                  "type": "boolean"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "vAlignment": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Text position inside a line.",
                  "enum": [
                    "Above",
                    "Center",
                    "Below"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "wrappingMode": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Wrapping (line-breaking) mode.",
                  "enum": [
                    "None",
                    "Character",
                    "Word"
                  ],
                  "type": "string"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "xOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Horizontal offset (to the right) in screen pixels.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        },
        "yOffset": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "description": "Vertical offset (up) in screen pixels.",
                  "type": "number"
                },
                {
                  "not": {
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ]
        }
      },
      "type": "object"
    },
    "BooleanValueDefinition": {
      "additionalProperties": false,
      "description": "A boolean value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "boolean"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DynamicProperty<boolean>",
          "description": "The value of the definition."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "ColorValueDefinition": {
      "additionalProperties": false,
      "description": "A color value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "color"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DynamicProperty<string>",
          "description": "The value of the definition."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "CubemapSky": {
      "additionalProperties": false,
      "description": "Interface that defines a cubemap sky.",
      "properties": {
        "negativeX": {
          "description": "Negative X cube map face.",
          "type": "string"
        },
        "negativeY": {
          "description": "Negative Y cube map face.",
          "type": "string"
        },
        "negativeZ": {
          "description": "Negative Z cube map face.",
          "type": "string"
        },
        "positiveX": {
          "description": "Positive X cube map face.",
          "type": "string"
        },
        "positiveY": {
          "description": "Positive Y cube map face.",
          "type": "string"
        },
        "positiveZ": {
          "description": "Positive Z cube map face.",
          "type": "string"
        },
        "type": {
          "description": "Sky type.",
          "enum": [
            "cubemap"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "positiveX",
        "negativeX",
        "positiveY",
        "negativeY",
        "positiveZ",
        "negativeZ"
      ],
      "type": "object"
    },
    "DataTextureProperties": {
      "additionalProperties": false,
      "description": "Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).",
      "properties": {
        "format": {
          "$ref": "#/definitions/PixelFormat"
        },
        "height": {
          "type": "number"
        },
        "type": {
          "$ref": "#/definitions/TextureDataType"
        },
        "width": {
          "type": "number"
        }
      },
      "required": [
        "width",
        "height"
      ],
      "type": "object"
    },
    "Definition": {
      "anyOf": [
        {
          "$ref": "#/definitions/ValueDefinition"
        },
        {
          "$ref": "#/definitions/StyleDeclaration"
        }
      ],
      "description": "Possible values for `definitions` element of [Theme]."
    },
    "Definitions": {
      "additionalProperties": {
        "$ref": "#/definitions/Definition"
      },
      "description": "An array of [[Definition]]s.",
      "type": "object"
    },
    "DirectionalLight": {
      "additionalProperties": false,
      "defaultSnippets": [
        {
          "body": {
            "color": "#${2:fff}",
            "direction": {
              "x": "^${4:1}",
              "y": "^${5:0}",
              "z": "^${6:0}"
            },
            "intensity": "^${3:1}",
            "name": "${1:directional-light$:1}",
            "type": "directional"
          },
          "description": "Adds a new Directional Light",
          "label": "New Directional Light"
        }
      ],
      "description": "Light type: directional.",
      "properties": {
        "castShadow": {
          "type": "boolean"
        },
        "color": {
          "format": "color-hex",
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/Vector3Like"
        },
        "intensity": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "directional"
          ],
          "type": "string"
        }
      },
      "required": [
        "color",
        "direction",
        "intensity",
        "name",
        "type"
      ],
      "type": "object"
    },
    "DynamicProperty<(\"Above\"|\"Center\"|\"Below\")>": {
      "anyOf": [
        {
          "enum": [
            "Above",
            "Center",
            "Below"
          ],
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition<(\"Above\"|\"Center\"|\"Below\")>"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<(\"Left\"|\"Center\"|\"Right\")>": {
      "anyOf": [
        {
          "enum": [
            "Left",
            "Center",
            "Right"
          ],
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition<(\"Left\"|\"Center\"|\"Right\")>"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<StyleColor>": {
      "anyOf": [
        {
          "$ref": "#/definitions/StyleColor"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition<StyleColor>"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<StyleLength>": {
      "anyOf": [
        {
          "$ref": "#/definitions/StyleLength"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition<StyleLength>"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<boolean>": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition<boolean>"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<number>": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition<number>"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "DynamicProperty<string>": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonExpr"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition<string>"
        }
      ],
      "description": "Decorate property type with possible dynamic variants."
    },
    "Fog": {
      "additionalProperties": false,
      "description": "Interface that defines the options to configure fog.",
      "properties": {
        "color": {
          "description": "Fog's color.",
          "type": "string"
        },
        "startRatio": {
          "description": "Distance ratio to far plane at which the linear fog begins.",
          "type": "number"
        }
      },
      "required": [
        "color",
        "startRatio"
      ],
      "type": "object"
    },
    "FontCatalogConfig": {
      "additionalProperties": false,
      "description": "Fonts used for all text related rendering.",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "name"
      ],
      "type": "object"
    },
    "GeometryKind": {
      "description": "The kind of geometry is used to\n\na) Group objects together, allowing the group to be hidden or displayed.\n\nb) Assigning the objects a loading phase. If a [[PhasedTileGeometryManager]] is used, techniques\n      without a `GeometryKind` may not be processed (at the desired phase).\n\nAny string can be used to specify the kind of the technique in a style in the theme file. Is is\nsuggested to specify multiple kinds for specific types of data. For a highway, the following list\nof kinds is suggested:\n\n    [\"line\", \"road\", \"road:highway\"]\n\nIf it is a tunnel for a highway:\n\n    [\"line\", \"road\", \"road:highway\", \"tunnel\", \"road:tunnel\", \"road:highway:tunnel\"]\n\nIf specified in this way, specific types of data (here: highway roads) can be enabled and/or\ndisabled.",
      "enum": [
        "_all_",
        "background",
        "terrain",
        "area",
        "line",
        "water",
        "border",
        "road",
        "building",
        "label",
        "detail"
      ],
      "type": "string"
    },
    "GeometryKindSet": {
      "additionalProperties": false,
      "description": "A set of [[GeometryKind]]s.",
      "properties": {
        "size": {
          "type": "number"
        }
      },
      "required": [
        "size"
      ],
      "type": "object"
    },
    "GradientSky": {
      "additionalProperties": false,
      "description": "Interface that defines a procedural gradient sky.",
      "properties": {
        "bottomColor": {
          "description": "Color of bottom part of the gradient.",
          "format": "color-hex",
          "type": "string"
        },
        "groundColor": {
          "description": "Color of the ground plane.",
          "format": "color-hex",
          "type": "string"
        },
        "monomialPower": {
          "description": "Texture's gradient power.",
          "type": "number"
        },
        "topColor": {
          "description": "Color of the upper part of the gradient.",
          "format": "color-hex",
          "type": "string"
        },
        "type": {
          "description": "Sky type.",
          "enum": [
            "gradient"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "topColor",
        "bottomColor",
        "groundColor"
      ],
      "type": "object"
    },
    "HeightBasedColors": {
      "additionalProperties": false,
      "description": "Interface containing the definition of different colors to be used at different heights with the\n[[TerrainTechnique]].",
      "properties": {
        "colorArray": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "heightArray": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "heightArray",
        "colorArray"
      ],
      "type": "object"
    },
    "ImageDefinition": {
      "additionalProperties": false,
      "description": "Define an image (e.g. icon).",
      "properties": {
        "atlas": {
          "description": "Url of JSON file containing the texture atlas",
          "type": "string"
        },
        "preload": {
          "description": "`true` to start loading at init tile, `false` to lazily wait until required.",
          "type": "boolean"
        },
        "url": {
          "description": "Url to load content from.",
          "type": "string"
        }
      },
      "required": [
        "url",
        "preload"
      ],
      "type": "object"
    },
    "ImageDefinitions": {
      "additionalProperties": {
        "$ref": "#/definitions/ImageDefinition",
        "description": "Name of Image."
      },
      "type": "object"
    },
    "ImageTexture": {
      "additionalProperties": false,
      "description": "Can be used to create a texture atlas.",
      "properties": {
        "flipH": {
          "description": "Defaults to false.",
          "type": "boolean"
        },
        "flipV": {
          "description": "Defaults to false.",
          "type": "boolean"
        },
        "height": {
          "description": "Specify sub-region:  Defaults to 0, meaning height is taken from loaded image.",
          "type": "number"
        },
        "image": {
          "description": "Name of ImageDefinition to use.",
          "type": "string"
        },
        "name": {
          "description": "Name of ImageTexture. Used to reference texture in the styles.",
          "type": "string"
        },
        "opacity": {
          "description": "Defaults to 1.",
          "type": "number"
        },
        "origin": {
          "description": "Origin of image, defaults to \"topleft\"",
          "type": "string"
        },
        "width": {
          "description": "Specify sub-region:  Defaults to 0, meaning width is taken from loaded image.",
          "type": "number"
        },
        "xOffset": {
          "description": "Specify sub-region: Defaults to 0.",
          "type": "number"
        },
        "yOffset": {
          "description": "Specify sub-region: Defaults to 0.",
          "type": "number"
        }
      },
      "required": [
        "name",
        "image"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<(\"Above\"|\"Center\"|\"Below\")>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "enum": [
              "Above",
              "Center",
              "Below"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<(\"Left\"|\"Center\"|\"Right\")>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "enum": [
              "Left",
              "Center",
              "Right"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<StyleColor>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/StyleColor"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<StyleLength>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/StyleLength"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<boolean>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "type": "boolean"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<number>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<string>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "exponent": {
          "type": "number"
        },
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic",
            "Exponential"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "JsonArray": {
      "description": "A type representing JSON arrays.",
      "items": {
        "$ref": "#/definitions/JsonValue"
      },
      "type": "array"
    },
    "JsonExpr": {
      "$ref": "#/definitions/JsonArray",
      "description": "The JSON representation of an [[Expr]] object."
    },
    "JsonObject": {
      "additionalProperties": {
        "$ref": "#/definitions/JsonValue"
      },
      "description": "A type representing JSON objects.",
      "type": "object"
    },
    "JsonValue": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "boolean"
        },
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/JsonObject"
        },
        {
          "$ref": "#/definitions/JsonArray"
        }
      ],
      "description": "A type represeting JSON values."
    },
    "Light": {
      "anyOf": [
        {
          "$ref": "#/definitions/AmbientLight"
        },
        {
          "$ref": "#/definitions/DirectionalLight"
        }
      ],
      "description": "Possible lights used for light the map."
    },
    "LineCaps": {
      "description": "Available line caps types(`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\nDefault is `\"Round\"`.",
      "enum": [
        "Square",
        "Round",
        "None",
        "TriangleOut",
        "TriangleIn"
      ],
      "type": "string"
    },
    "MagFilter": {
      "description": "Available texture magnification filters.",
      "enum": [
        "nearest",
        "linear"
      ],
      "type": "string"
    },
    "MinFilter": {
      "description": "Available texture minification filters.",
      "enum": [
        "nearest",
        "nearestMipMapNearest",
        "nearestMipMapLinear",
        "linear",
        "linearMipMapNearest",
        "linearMipMapLinear"
      ],
      "type": "string"
    },
    "NumericValueDefinition": {
      "additionalProperties": false,
      "description": "A numerical value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "number"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DynamicProperty<number>",
          "description": "The value of the definition."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "PixelFormat": {
      "enum": [
        "Alpha",
        "RGB",
        "RGBA",
        "Luminance",
        "LuminanceAlpha",
        "RGBE",
        "Depth",
        "DepthStencil",
        "Red"
      ],
      "type": "string"
    },
    "PoiStackMode": {
      "description": "Define the stacking option. Enum values for theme file are in \"kebab-case\".",
      "enum": [
        "show-in-stack",
        "hide-in-stack",
        "show-parent"
      ],
      "type": "string"
    },
    "PoiTableRef": {
      "additionalProperties": false,
      "description": "Definition for a [[PoiTable]] reference as part of the [[Theme]] object.",
      "properties": {
        "name": {
          "description": "Required name of the [[PoiTable]] for later reference.",
          "type": "string"
        },
        "url": {
          "description": "Required URL from where to load [[PoiTable]].\n\nShould refer to JSON that is matched [[PoiTableDef]] interface.",
          "type": "string"
        },
        "useAltNamesForKey": {
          "description": "If set to `true`, the list of values in the field \"altNames\" will be used as names for this\nPOI.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "url",
        "useAltNamesForKey"
      ],
      "type": "object"
    },
    "SelectorValueDefinition": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "selector"
          ],
          "type": "string"
        },
        "value": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/JsonExpr"
            }
          ],
          "description": "The value of the definition.\n\nSee [[BaseStyle.when]]."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "ShaderTechniqueMaterialParameters": {
      "type": "object"
    },
    "Sky": {
      "anyOf": [
        {
          "$ref": "#/definitions/GradientSky"
        },
        {
          "$ref": "#/definitions/CubemapSky"
        }
      ],
      "description": "Interface that defines the options to configure the sky."
    },
    "StringValueDefinition": {
      "additionalProperties": false,
      "description": "A string value definition.",
      "properties": {
        "description": {
          "description": "The description of the definition.",
          "type": "string"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "string"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DynamicProperty<string>",
          "description": "The value of the definition."
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "StyleColor": {
      "description": "Description of colors inside a style. Supports hex values as well as CSS hex, rgb and hsl values\n(i.e. `0xffffff`, `#f00fab`, `#aaa`, `rgb(255, 0 120)`, `hsl(360, 100%, 100%)`, etc.).",
      "type": [
        "string",
        "number"
      ]
    },
    "StyleDeclaration": {
      "anyOf": [
        {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<PointTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "squares"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<PointTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "circles"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<MarkerTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "labeled-icon"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<MarkerTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "line-marker"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<MarkerTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "secondaryRenderOrder": {
                  "type": "number"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "line"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<SegmentsTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "segments"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<SolidLineTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "secondaryRenderOrder": {
                  "type": "number"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "solid-line"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<BaseTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "label-rejection-line"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<DashedLineTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "dashed-line"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<FillTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "fill"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<StandardTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "standard"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<BasicExtrudedLineTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "shading": {
                  "enum": [
                    "basic"
                  ],
                  "type": "string"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "extruded-line"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<StandardExtrudedLineTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "shading": {
                  "enum": [
                    "standard"
                  ],
                  "type": "string"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "extruded-line"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "shading",
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<ExtrudedPolygonTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "extruded-polygon"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<ShaderTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "shader"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<TerrainTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "terrain"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "$ref": "#/definitions/Attr<TextTechniqueParams>"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "text"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "attr": {
                  "type": "object"
                },
                "debug": {
                  "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
                  "type": "boolean"
                },
                "description": {
                  "description": "Human readable description.",
                  "type": "string"
                },
                "final": {
                  "description": "Optional. If `true`, no more matching styles will be evaluated.",
                  "type": "boolean"
                },
                "labelProperty": {
                  "description": "XYZ defines the property to display as text label of a feature in the styles.",
                  "type": "string"
                },
                "layer": {
                  "description": "The layer containing the carto features processed by this style rule.",
                  "type": "string"
                },
                "metricUnit": {
                  "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
                  "enum": [
                    "Meter",
                    "Pixel"
                  ],
                  "type": "string"
                },
                "renderOrder": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Specify `renderOrder` of value."
                },
                "renderOrderBiasGroup": {
                  "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
                  "type": "string"
                },
                "renderOrderBiasProperty": {
                  "description": "Property that is used to hold the z-order delta in [[renderOrderBiasRange]].",
                  "type": "string"
                },
                "renderOrderBiasRange": {
                  "description": "Minimum and maximum z-order delta values.",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "renderOrderOffset": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "default": 0,
                  "description": "Offset added on top of `renderOrder` of object.\n\nMay be uses to adjust final `renderOrder` without interferring with automatically assigned\nvalues.\n\nUsing [[renderOrderBiasProperty]]"
                },
                "styles": {
                  "description": "Array of substyles.",
                  "items": {
                    "$ref": "#/definitions/StyleDeclaration"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Technique name. See the classes extending from this class to determine what possible\ntechniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.",
                  "enum": [
                    "none"
                  ],
                  "type": "string"
                },
                "transient": {
                  "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
                  "type": "boolean"
                },
                "when": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/JsonExpr"
                    }
                  ],
                  "description": "Condition that is applied to feature properties to check if given [[Style]] this feature\nshould emit geometry of this style.\n\nConditions are defined using [[Array]]s describing literals, built-in symbols and function\ncalls:\n  - `[\"has\", string]` returns `true` if the given property exists.\n  - `[\"get\", string]` returns the value of the given feature property with the given name.\n  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n    expression is included in the given `Array` of literals.\n  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than the result of evaluating the second expression.\n  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than the result of evaluating the second expression.\n  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is less than or equal the result of evaluating the second expression.\n  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is greater than or equal the result of evaluating the second expression.\n  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is equal the result of evaluating the second expression.\n  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n    expression is not equal to the result of evaluating the second expression.\n  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n    a `string` or an `Array`; otherwise, returns `undefined`.\n  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression contains the `string` obtained from the\n    second expression; otherwise, returns `undefined`.\n  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression starts with the `string` obtained from\n    the second expression; otherwise, returns `undefined`.\n  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n    if the `string` obtained from the first expression ends with the `string` obtained from\n    the second expression; otherwise, returns `undefined`."
                }
              },
              "required": [
                "technique",
                "when"
              ],
              "type": "object"
            }
          ]
        },
        {
          "$ref": "#/definitions/JsonExpr"
        }
      ],
      "description": "Compound type that merges all raw [Style] with selector arguments from [BaseSelector], optionally\na [[Reference]]."
    },
    "StyleLength": {
      "type": [
        "string",
        "number"
      ]
    },
    "StyleSet": {
      "description": "An array of [[StyleSelector]]s that are used together to define how a [[DataSource]] should be\nrendered. `StyleSet`s are applied to sources providing vector tiles via their method\n`setStyleSet`. This is also handle internally when a whole theme is passed to a [[MapView]] via\n`mapview.theme`.",
      "items": {
        "$ref": "#/definitions/StyleDeclaration"
      },
      "type": "array"
    },
    "Styles": {
      "additionalProperties": {
        "$ref": "#/definitions/StyleSet"
      },
      "description": "A dictionary of [[StyleSet]]s.",
      "type": "object"
    },
    "TextStyleDefinition": {
      "additionalProperties": false,
      "description": "Various text styles used with labels and texts.",
      "properties": {
        "backgroundColor": {
          "format": "color-hex",
          "type": "string"
        },
        "backgroundOpacity": {
          "type": "number"
        },
        "backgroundSize": {
          "type": "number"
        },
        "canvasRotation": {
          "type": "number"
        },
        "color": {
          "format": "color-hex",
          "type": "string"
        },
        "fontCatalogName": {
          "type": "string"
        },
        "fontName": {
          "type": "string"
        },
        "fontStyle": {
          "enum": [
            "Regular",
            "Bold",
            "Italic",
            "BoldItalic"
          ],
          "type": "string"
        },
        "fontVariant": {
          "enum": [
            "Regular",
            "AllCaps",
            "SmallCaps"
          ],
          "type": "string"
        },
        "hAlignment": {
          "enum": [
            "Left",
            "Center",
            "Right"
          ],
          "type": "string"
        },
        "leading": {
          "type": "number"
        },
        "lineRotation": {
          "type": "number"
        },
        "lineWidth": {
          "type": "number"
        },
        "maxLines": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "opacity": {
          "type": "number"
        },
        "rotation": {
          "type": "number"
        },
        "size": {
          "type": "number"
        },
        "tracking": {
          "type": "number"
        },
        "vAlignment": {
          "enum": [
            "Above",
            "Center",
            "Below"
          ],
          "type": "string"
        },
        "wrappingMode": {
          "enum": [
            "None",
            "Character",
            "Word"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TextureBuffer": {
      "additionalProperties": false,
      "description": "Buffer holding a texture.",
      "properties": {
        "buffer": {
          "additionalProperties": false,
          "description": "Buffer containing the (compressed) image or the raw texture data.",
          "properties": {
            "byteLength": {
              "description": "Read-only. The length of the ArrayBuffer (in bytes).",
              "type": "number"
            }
          },
          "required": [
            "byteLength"
          ],
          "type": "object"
        },
        "dataTextureProperties": {
          "$ref": "#/definitions/DataTextureProperties",
          "description": "Properties for creating a three.js DataTexture\n(https://threejs.org/docs/#api/en/textures/DataTexture)."
        },
        "type": {
          "description": "Mime type of the image or 'image/raw' in case of raw texture data.",
          "type": "string"
        }
      },
      "required": [
        "buffer",
        "type"
      ],
      "type": "object"
    },
    "TextureCoordinateType": {
      "enum": [
        "tile-space",
        "equirectangular-space"
      ],
      "type": "string"
    },
    "TextureDataType": {
      "enum": [
        "UnsignedByte",
        "Byte",
        "Short",
        "UnsignedShort",
        "Int",
        "UnsignedInt",
        "Float",
        "HalfFloat"
      ],
      "type": "string"
    },
    "TextureProperties": {
      "additionalProperties": false,
      "description": "Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).",
      "properties": {
        "flipY": {
          "description": "Flip texture vertically.\nSee: https://threejs.org/docs/#api/en/textures/Texture.flipY.",
          "type": "boolean"
        },
        "magFilter": {
          "$ref": "#/definitions/MagFilter",
          "description": "Texture magnification filter."
        },
        "minFilter": {
          "$ref": "#/definitions/MinFilter",
          "description": "Texture minification filter."
        },
        "repeatU": {
          "description": "Texture horizontal repetition rate.\nSee: https://threejs.org/docs/#api/en/textures/Texture.repeat.",
          "type": "number"
        },
        "repeatV": {
          "description": "Texture vertical repetition rate.\nSee: https://threejs.org/docs/#api/en/textures/Texture.repeat.",
          "type": "number"
        },
        "wrapS": {
          "$ref": "#/definitions/WrappingMode",
          "description": "Texture horizontal wrapping mode.\nSee: https://threejs.org/docs/#api/en/textures/Texture.wrapS."
        },
        "wrapT": {
          "$ref": "#/definitions/WrappingMode",
          "description": "Texture vertical wrapping mode.\nSee: https://threejs.org/docs/#api/en/textures/Texture.wrapT."
        }
      },
      "type": "object"
    },
    "Theme": {
      "additionalProperties": false,
      "description": "Map theme is used to define what features are shown and how the map is styled, for example\nwhich lightning is used or whether fog should be displayed.",
      "properties": {
        "$schema": {
          "description": "The URI of the JSON schema describing themes.",
          "type": "string"
        },
        "clearColor": {
          "description": "Color to be used as a clear background - no map objects.",
          "format": "color-hex",
          "type": "string"
        },
        "defaultTextStyle": {
          "$ref": "#/definitions/TextStyleDefinition",
          "description": "Define the default text style for styling labels and texts."
        },
        "definitions": {
          "$ref": "#/definitions/Definitions",
          "description": "The definitions exported by these theme."
        },
        "extends": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Theme"
            }
          ],
          "description": "The base `Theme` or `theme` URL to extend.\n\nIf used, base theme is loaded first, and then all the properties\nfrom inherited theme overwrite these defined in base theme."
        },
        "fog": {
          "$ref": "#/definitions/Fog",
          "description": "Define the fog used in the map scene."
        },
        "fontCatalogs": {
          "description": "List available fonts to be used while rendering text.",
          "items": {
            "$ref": "#/definitions/FontCatalogConfig"
          },
          "type": "array"
        },
        "imageTextures": {
          "description": "Image textures to be used while rendering geometries on the map view.",
          "items": {
            "$ref": "#/definitions/ImageTexture"
          },
          "type": "array"
        },
        "images": {
          "$ref": "#/definitions/ImageDefinitions",
          "description": "Optional images to be rendered on the map view."
        },
        "lights": {
          "description": "Define the lightning available on the three.js scene.",
          "items": {
            "$ref": "#/definitions/Light"
          },
          "type": "array"
        },
        "poiTables": {
          "description": "Optional list of [[ThemePoiTableDef]]s.",
          "items": {
            "$ref": "#/definitions/PoiTableRef"
          },
          "type": "array"
        },
        "sky": {
          "$ref": "#/definitions/Sky",
          "description": "Define the style of the sky presented in the map scene."
        },
        "styles": {
          "$ref": "#/definitions/Styles",
          "description": "Map styles available for datasources used to render the map."
        },
        "textStyles": {
          "description": "Define the style to render different types of text used on the map.",
          "items": {
            "$ref": "#/definitions/TextStyleDefinition"
          },
          "type": "array"
        },
        "url": {
          "description": "Actual URL the theme has been loaded from.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValueDefinition": {
      "anyOf": [
        {
          "$ref": "#/definitions/BooleanValueDefinition"
        },
        {
          "$ref": "#/definitions/NumericValueDefinition"
        },
        {
          "$ref": "#/definitions/StringValueDefinition"
        },
        {
          "$ref": "#/definitions/ColorValueDefinition"
        },
        {
          "$ref": "#/definitions/SelectorValueDefinition"
        }
      ],
      "description": "A value definition."
    },
    "Vector3Like": {
      "additionalProperties": false,
      "description": "Interface representing a Vector3.",
      "properties": {
        "x": {
          "description": "The X position.",
          "type": "number"
        },
        "y": {
          "description": "The Y position.",
          "type": "number"
        },
        "z": {
          "description": "The Z position.",
          "type": "number"
        }
      },
      "required": [
        "x",
        "y",
        "z"
      ],
      "type": "object"
    },
    "WrappingMode": {
      "description": "Available texture wrapping modes.",
      "enum": [
        "clamp",
        "repeat",
        "mirror"
      ],
      "type": "string"
    }
  }
}